# Generated by Django 5.2.3 on 2025-07-15 13:08

import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('nomenclatures', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique internal product code', max_length=50, unique=True, verbose_name='Product Code')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Product Name')),
                ('description', models.TextField(blank=True, help_text='Detailed product description', verbose_name='Description')),
                ('unit_type', models.CharField(choices=[('PIECE', 'Piece/Count'), ('WEIGHT', 'Weight (kg, g)'), ('VOLUME', 'Volume (l, ml)'), ('LENGTH', 'Length (m, cm)')], default='PIECE', help_text='How this product is measured/sold', max_length=10, verbose_name='Unit Type')),
                ('track_batches', models.BooleanField(default=False, help_text='Enable batch/lot tracking', verbose_name='Track Batches')),
                ('track_serial_numbers', models.BooleanField(default=False, help_text='Enable serial number tracking', verbose_name='Track Serial Numbers')),
                ('requires_expiry_date', models.BooleanField(default=False, help_text='Product requires expiry date tracking', verbose_name='Requires Expiry Date')),
                ('current_avg_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), help_text='Moving average cost', max_digits=10, verbose_name='Current Average Cost')),
                ('current_stock_qty', models.DecimalField(decimal_places=3, default=Decimal('0.000'), help_text='Total quantity across all locations', max_digits=12, verbose_name='Current Stock Quantity')),
                ('last_purchase_cost', models.DecimalField(blank=True, decimal_places=4, help_text='Cost from last purchase', max_digits=10, null=True, verbose_name='Last Purchase Cost')),
                ('last_purchase_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Purchase Date')),
                ('last_sale_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Sale Date')),
                ('last_sale_price', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True, verbose_name='Last Sale Price')),
                ('lifecycle_status', models.CharField(choices=[('DRAFT', 'Draft - In Development'), ('ACTIVE', 'Active - Normal Sales'), ('PHASE_OUT', 'Phase Out - Limited Sales'), ('DISCONTINUED', 'Discontinued - No Sales')], db_index=True, default='ACTIVE', help_text='Current product lifecycle stage', max_length=20, verbose_name='Lifecycle Status')),
                ('sales_blocked', models.BooleanField(db_index=True, default=False, help_text='Block all sales for this product', verbose_name='Sales Blocked')),
                ('purchase_blocked', models.BooleanField(db_index=True, default=False, help_text='Block all purchases for this product', verbose_name='Purchase Blocked')),
                ('allow_negative_sales', models.BooleanField(default=False, help_text='Allow sales when insufficient stock (overrides location setting)', verbose_name='Allow Negative Sales')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('base_unit', models.ForeignKey(help_text='Base unit for storage and calculations', on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.unitofmeasure', verbose_name='Base Unit')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nomenclatures.brand', verbose_name='Brand')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_products', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('product_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nomenclatures.productgroup', verbose_name='Product Group')),
                ('product_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='nomenclatures.producttype', verbose_name='Product Type')),
                ('tax_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.taxgroup', verbose_name='Tax Group')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ProductPackaging',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversion_factor', models.DecimalField(decimal_places=3, help_text='Колко base_unit има в тази опаковка', max_digits=10, verbose_name='Conversion Factor')),
                ('is_default_sale_unit', models.BooleanField(default=False, help_text='Основна единица за продажба', verbose_name='Default Sale Unit')),
                ('is_default_purchase_unit', models.BooleanField(default=False, help_text='Основна единица за покупка', verbose_name='Default Purchase Unit')),
                ('weight_kg', models.DecimalField(blank=True, decimal_places=3, help_text='Тегло на празната опаковка', max_digits=8, null=True, verbose_name='Weight (kg)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packagings', to='products.product', verbose_name='Product')),
                ('unit', models.ForeignKey(help_text='Мерна единица за тази опаковка', on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.unitofmeasure', verbose_name='Unit')),
            ],
            options={
                'verbose_name': 'Product Packaging',
                'verbose_name_plural': 'Product Packagings',
                'ordering': ['product', 'conversion_factor'],
            },
        ),
        migrations.CreateModel(
            name='ProductBarcode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('barcode', models.CharField(help_text='EAN13, UPC или вътрешен баркод', max_length=50, unique=True, verbose_name='Barcode')),
                ('is_primary', models.BooleanField(default=False, help_text='Основен баркод за този продукт', verbose_name='Is Primary')),
                ('barcode_type', models.CharField(choices=[('STANDARD', 'Standard EAN/UPC'), ('WEIGHT', 'Weight-based (28xxx)'), ('INTERNAL', 'Internal Code')], default='STANDARD', max_length=10, verbose_name='Barcode Type')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barcodes', to='products.product', verbose_name='Product')),
                ('packaging', models.ForeignKey(blank=True, help_text='За коя опаковка е този баркод', null=True, on_delete=django.db.models.deletion.SET_NULL, to='products.productpackaging', verbose_name='Packaging')),
            ],
            options={
                'verbose_name': 'Product Barcode',
                'verbose_name_plural': 'Product Barcodes',
                'ordering': ['product', '-is_primary', 'barcode'],
            },
        ),
        migrations.CreateModel(
            name='ProductPLU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plu_code', models.CharField(help_text='PLU код за везни продукти', max_length=10, verbose_name='PLU Code')),
                ('is_primary', models.BooleanField(default=False, help_text='Основен PLU код за този продукт', verbose_name='Is Primary')),
                ('priority', models.IntegerField(default=0, help_text='По-висок приоритет = предпочитан при конфликти', verbose_name='Priority')),
                ('description', models.CharField(blank=True, max_length=100, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plu_codes', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product PLU Code',
                'verbose_name_plural': 'Product PLU Codes',
                'ordering': ['-priority', '-is_primary', 'plu_code'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['code'], name='products_pr_code_4c2607_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='products_pr_name_9ff0a3_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['lifecycle_status'], name='products_pr_lifecyc_283c93_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sales_blocked', 'purchase_blocked'], name='products_pr_sales_b_6c0cb0_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['lifecycle_status', 'sales_blocked'], name='products_pr_lifecyc_ee1faa_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['unit_type', 'lifecycle_status'], name='products_pr_unit_ty_254340_idx'),
        ),
        migrations.AddConstraint(
            model_name='productpackaging',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default_sale_unit', True)), fields=('product',), name='unique_default_sale_unit_per_product'),
        ),
        migrations.AddConstraint(
            model_name='productpackaging',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default_purchase_unit', True)), fields=('product',), name='unique_default_purchase_unit_per_product'),
        ),
        migrations.AlterUniqueTogether(
            name='productpackaging',
            unique_together={('product', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='productbarcode',
            constraint=models.UniqueConstraint(condition=models.Q(('is_primary', True)), fields=('product',), name='unique_primary_barcode_per_product'),
        ),
        migrations.AddConstraint(
            model_name='productplu',
            constraint=models.UniqueConstraint(condition=models.Q(('is_primary', True)), fields=('product',), name='unique_primary_plu_per_product'),
        ),
        migrations.AlterUniqueTogether(
            name='productplu',
            unique_together={('product', 'plu_code')},
        ),
    ]
