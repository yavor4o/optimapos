# purchases/management/commands/setup_document_types.py

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from purchases.models import DocumentType


class Command(BaseCommand):
    help = 'Creates standard document types for POS/retail system'

    def add_arguments(self, parser):
        parser.add_argument(
            '--mode',
            type=str,
            choices=['basic', 'extended', 'full'],
            default='basic',
            help='Setup mode: basic (4 types), extended (7 types), full (10 types)'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Force recreation of existing document types'
        )
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Show what would be created without actually creating'
        )

    def handle(self, *args, **options):
        mode = options['mode']
        force = options['force']
        dry_run = options['dry_run']

        self.stdout.write(
            self.style.SUCCESS(f'\nüöÄ Setting up document types - {mode.upper()} mode\n')
        )

        if dry_run:
            self.stdout.write(
                self.style.WARNING('DRY RUN MODE - No changes will be made\n')
            )

        # –í—Å–∏—á–∫–∏ document types
        all_types = self._get_all_document_types()

        # –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å–ø–æ—Ä–µ–¥ —Ä–µ–∂–∏–º–∞
        if mode == 'basic':
            types_to_create = all_types[:4]  # REQ, ORD, GRN, INV
        elif mode == 'extended':
            types_to_create = all_types[:7]  # + ADJ, TRF, WO
        else:  # full
            types_to_create = all_types  # –í—Å–∏—á–∫–∏

        self.stdout.write(f"üìã Will create {len(types_to_create)} document types:\n")

        for doc_type in types_to_create:
            status = "‚úÖ NEW" if not self._type_exists(doc_type['code']) else "üîÑ EXISTS"
            self.stdout.write(f"  {status} {doc_type['code']} - {doc_type['name']}")

        self.stdout.write("")

        if not dry_run:
            created_count = self._create_document_types(types_to_create, force)
            self.stdout.write(
                self.style.SUCCESS(f'\nüéâ Successfully created/updated {created_count} document types!\n')
            )
            self._show_usage_examples()
        else:
            self.stdout.write(
                self.style.WARNING('DRY RUN COMPLETE - Run without --dry-run to create types\n')
            )

    def _get_all_document_types(self):
        """–í—Ä—ä—â–∞ –≤—Å–∏—á–∫–∏ –ø—Ä–µ–¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏ document types"""
        return [
            # PRIORITY 1 - PURCHASES (BASIC)
            {
                'code': 'REQ',
                'name': 'Procurement Request',
                'type_key': 'stock_in',
                'stock_effect': 0,  # No effect - —Å–∞–º–æ –∑–∞—è–≤–∫–∞
                'auto_confirm': False,
                'auto_receive': False,
                'requires_batch': False,
                'requires_expiry': False,
                'description': '–ó–∞—è–≤–∫–∞ –∑–∞ –ø–æ–∫—É–ø–∫–∞ –æ—Ç –º–∞–≥–∞–∑–∏–Ω/—Å–∫–ª–∞–¥'
            },
            {
                'code': 'ORD',
                'name': 'Purchase Order',
                'type_key': 'stock_in',
                'stock_effect': 0,  # No effect - –æ—â–µ –Ω–µ –µ –ø–æ–ª—É—á–µ–Ω–æ
                'auto_confirm': True,  # –ü–æ—Ä—ä—á–∫–∏—Ç–µ —Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ confirmed
                'auto_receive': False,
                'requires_batch': False,
                'requires_expiry': False,
                'description': '–û—Ñ–∏—Ü–∏–∞–ª–Ω–∞ –ø–æ—Ä—ä—á–∫–∞ –∫—ä–º –¥–æ—Å—Ç–∞–≤—á–∏–∫'
            },
            {
                'code': 'GRN',
                'name': 'Goods Receipt Note',
                'type_key': 'stock_in',
                'stock_effect': 1,  # Increases stock
                'auto_confirm': True,
                'auto_receive': True,
                'requires_batch': True,  # –ó–∞ –ø—Ä–æ—Å–ª–µ–¥–∏–º–æ—Å—Ç
                'requires_expiry': True,  # –ó–∞ —Ö—Ä–∞–Ω–∏/–ª–µ–∫–∞—Ä—Å—Ç–≤–∞
                'description': '–§–∏–∑–∏—á–µ—Å–∫–æ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ —Å—Ç–æ–∫–∞'
            },
            {
                'code': 'INV',
                'name': 'Purchase Invoice',
                'type_key': 'invoice',
                'stock_effect': 0,  # No effect - —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç
                'auto_confirm': True,
                'auto_receive': False,
                'requires_batch': False,
                'requires_expiry': False,
                'description': '–§–∞–∫—Ç—É—Ä–∞ –æ—Ç –¥–æ—Å—Ç–∞–≤—á–∏–∫'
            },

            # PRIORITY 2 - INVENTORY (EXTENDED)
            {
                'code': 'ADJ',
                'name': 'Stock Adjustment',
                'type_key': 'adjustment',
                'stock_effect': 1,  # –ú–æ–∂–µ –¥–∞ –µ –∏ -1 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç adjustment
                'auto_confirm': False,  # –ò–∑–∏—Å–∫–≤–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
                'auto_receive': False,
                'requires_batch': True,
                'requires_expiry': False,
                'allow_reverse_operations': True,  # –ü–æ–∑–≤–æ–ª—è–≤–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                'description': '–ö–æ—Ä–µ–∫—Ü–∏—è –Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è'
            },
            {
                'code': 'TRF',
                'name': 'Internal Transfer',
                'type_key': 'transfer',
                'stock_effect': 1,  # –ó–∞ receiving location
                'auto_confirm': False,
                'auto_receive': False,
                'requires_batch': True,
                'requires_expiry': False,
                'description': '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –º–µ–∂–¥—É —Å–∫–ª–∞–¥–æ–≤–µ/–º–∞–≥–∞–∑–∏–Ω–∏'
            },
            {
                'code': 'WO',
                'name': 'Write Off',
                'type_key': 'stock_out',
                'stock_effect': -1,  # Decreases stock
                'auto_confirm': False,  # –ò–∑–∏—Å–∫–≤–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
                'auto_receive': True,
                'requires_batch': True,
                'requires_expiry': True,
                'description': '–û—Ç–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–≤–∞–ª–µ–Ω–∞/–∏–∑—Ç–µ–∫–ª–∞ —Å—Ç–æ–∫–∞'
            },

            # PRIORITY 3 - SALES (FULL)
            {
                'code': 'SAL',
                'name': 'Sales Receipt',
                'type_key': 'stock_out',
                'stock_effect': -1,  # Decreases stock
                'auto_confirm': True,
                'auto_receive': True,
                'requires_batch': False,
                'requires_expiry': False,
                'description': '–ö–∞—Å–æ–≤–∞ –±–µ–ª–µ–∂–∫–∞/–ø—Ä–æ–¥–∞–∂–±–∞'
            },
            {
                'code': 'SOR',
                'name': 'Sales Order',
                'type_key': 'stock_out',
                'stock_effect': 0,  # No effect until delivered
                'auto_confirm': False,
                'auto_receive': False,
                'requires_batch': False,
                'requires_expiry': False,
                'description': '–ü–æ—Ä—ä—á–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç'
            },
            {
                'code': 'SRT',
                'name': 'Sales Return',
                'type_key': 'stock_in',
                'stock_effect': 1,  # Increases stock
                'auto_confirm': False,  # –ò–∑–∏—Å–∫–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
                'auto_receive': False,
                'requires_batch': True,
                'requires_expiry': False,
                'description': '–í—Ä—ä—â–∞–Ω–µ –Ω–∞ —Å—Ç–æ–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç'
            }
        ]

    def _type_exists(self, code):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ document type —Å—ä—â–µ—Å—Ç–≤—É–≤–∞"""
        return DocumentType.objects.filter(code=code).exists()

    @transaction.atomic
    def _create_document_types(self, types_to_create, force=False):
        """–°—ä–∑–¥–∞–≤–∞ document types"""
        created_count = 0

        for doc_type_data in types_to_create:
            code = doc_type_data['code']

            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
            existing = DocumentType.objects.filter(code=code).first()

            if existing and not force:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è  {code} already exists - skipping (use --force to update)")
                )
                continue

            # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ description –∑–∞ –∑–∞–ø–∏—Å–∞ –≤ DB
            db_data = {k: v for k, v in doc_type_data.items() if k != 'description'}

            if existing and force:
                # –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â
                for key, value in db_data.items():
                    setattr(existing, key, value)
                existing.save()
                self.stdout.write(
                    self.style.SUCCESS(f"üîÑ Updated {code} - {existing.name}")
                )
                created_count += 1
            else:
                # –°—ä–∑–¥–∞–≤–∞–º–µ –Ω–æ–≤
                doc_type = DocumentType.objects.create(**db_data)
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ Created {code} - {doc_type.name}")
                )
                created_count += 1

        return created_count

    def _show_usage_examples(self):
        """–ü–æ–∫–∞–∑–≤–∞ –ø—Ä–∏–º–µ—Ä–∏ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ"""
        self.stdout.write(
            self.style.SUCCESS('üìö USAGE EXAMPLES:\n')
        )

        examples = [
            "# Create procurement request:",
            "from purchases.services import ProcurementService",
            "request = ProcurementService.create_procurement_request(...)",
            "",
            "# Convert request to order:",
            "order = ProcurementService.convert_request_to_order(request)",
            "",
            "# Create document directly:",
            "from purchases.services import DocumentService",
            "doc = DocumentService.create_purchase_document(",
            "    supplier=supplier,",
            "    location=location,",
            "    document_type_code='GRN',  # Goods Receipt",
            "    lines_data=[...]",
            ")",
            "",
            "# Filter documents by type:",
            "requests = PurchaseDocument.objects.filter(document_type__code='REQ')",
            "orders = PurchaseDocument.objects.filter(document_type__code='ORD')",
        ]

        for line in examples:
            if line.startswith('#'):
                self.stdout.write(self.style.SUCCESS(line))
            else:
                self.stdout.write(f"  {line}")

        self.stdout.write(
            self.style.SUCCESS('\nüîó Admin: /admin/purchases/documenttype/')
        )
        self.stdout.write(
            self.style.SUCCESS('üîó Documents: /admin/purchases/purchasedocument/\n')
        )