# Generated by Django 5.2.3 on 2025-08-25 13:49

import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('nomenclatures', '0001_initial'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_number', models.CharField(blank=True, help_text='Generated by DocumentService', max_length=50, unique=True, verbose_name='Document Number')),
                ('document_date', models.DateField(default=django.utils.timezone.now, help_text='Date when document was created', verbose_name='Document Date')),
                ('status', models.CharField(blank=True, help_text='Managed by DocumentService', max_length=30, verbose_name='Status')),
                ('partner_object_id', models.PositiveIntegerField(blank=True, help_text='ID of the partner object', null=True, verbose_name='Partner ID')),
                ('location_object_id', models.PositiveIntegerField(blank=True, help_text='ID of the location object', null=True, verbose_name='Location ID')),
                ('external_reference', models.CharField(blank=True, help_text='External PO number, contract reference, etc.', max_length=100, verbose_name='External Reference')),
                ('notes', models.TextField(blank=True, help_text='Additional notes and comments', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total before VAT and discounts', max_digits=12, verbose_name='Subtotal')),
                ('discount_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount amount', max_digits=12, verbose_name='Discount Total')),
                ('vat_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total VAT amount', max_digits=12, verbose_name='VAT Total')),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final total including VAT', max_digits=12, verbose_name='Total')),
                ('prices_entered_with_vat', models.BooleanField(blank=True, help_text='Override location settings. NULL means use location defaults', null=True, verbose_name='Prices Include VAT')),
                ('is_paid', models.BooleanField(default=False, help_text='Whether this document has been paid', verbose_name='Is Paid')),
                ('payment_date', models.DateField(blank=True, help_text='When payment was made', null=True, verbose_name='Payment Date')),
                ('payment_method', models.CharField(blank=True, help_text='How payment was made', max_length=50, verbose_name='Payment Method')),
                ('expected_delivery_date', models.DateField(help_text='When we expect this order to be delivered', verbose_name='Expected Delivery Date')),
                ('is_urgent', models.BooleanField(default=False, help_text='Mark as urgent for priority processing', verbose_name='Urgent Order')),
                ('supplier_order_reference', models.CharField(blank=True, help_text='Reference number from supplier system', max_length=100, verbose_name='Supplier Order Reference')),
                ('supplier_confirmed', models.BooleanField(default=False, help_text='Has supplier confirmed this order?', verbose_name='Supplier Confirmed')),
                ('supplier_confirmed_date', models.DateField(blank=True, help_text='When supplier confirmed the order', null=True, verbose_name='Supplier Confirmed Date')),
                ('sent_to_supplier_at', models.DateTimeField(blank=True, help_text='When order was sent to supplier', null=True, verbose_name='Sent to Supplier At')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('document_type', models.ForeignKey(blank=True, help_text='Set by DocumentService on creation', limit_choices_to={'is_active': True}, null=True, on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.documenttype', verbose_name='Document Type')),
                ('location_content_type', models.ForeignKey(blank=True, help_text='Type of location (InventoryLocation, OnlineStore, etc.)', limit_choices_to=models.Q(models.Q(('app_label', 'inventory'), ('model', 'inventorylocation')), models.Q(('app_label', 'sales'), ('model', 'onlinestore')), models.Q(('app_label', 'partners'), ('model', 'customersite')), models.Q(('app_label', 'hr'), ('model', 'office')), _connector='OR'), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_as_location', to='contenttypes.contenttype', verbose_name='Location Type')),
                ('partner_content_type', models.ForeignKey(blank=True, help_text='Type of partner (Supplier, Customer, etc.)', limit_choices_to=models.Q(models.Q(('app_label', 'partners'), ('model__in', ['supplier', 'customer'])), models.Q(('app_label', 'hr'), ('model', 'employee')), _connector='OR'), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_as_partner', to='contenttypes.contenttype', verbose_name='Partner Type')),
                ('sent_by', models.ForeignKey(blank=True, help_text='User who sent the order to supplier', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sent_purchase_orders', to=settings.AUTH_USER_MODEL, verbose_name='Sent By')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Purchase Order',
                'verbose_name_plural': 'Purchase Orders',
                'ordering': ['-created_at'],
                'permissions': [('can_send_to_supplier', 'Can send orders to supplier'), ('can_confirm_from_supplier', 'Can confirm orders from supplier'), ('can_create_delivery', 'Can create.html deliveries from orders'), ('can_view_supplier_details', 'Can view supplier details')],
            },
        ),
        migrations.CreateModel(
            name='DeliveryReceipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_number', models.CharField(blank=True, help_text='Generated by DocumentService', max_length=50, unique=True, verbose_name='Document Number')),
                ('document_date', models.DateField(default=django.utils.timezone.now, help_text='Date when document was created', verbose_name='Document Date')),
                ('status', models.CharField(blank=True, help_text='Managed by DocumentService', max_length=30, verbose_name='Status')),
                ('partner_object_id', models.PositiveIntegerField(blank=True, help_text='ID of the partner object', null=True, verbose_name='Partner ID')),
                ('location_object_id', models.PositiveIntegerField(blank=True, help_text='ID of the location object', null=True, verbose_name='Location ID')),
                ('external_reference', models.CharField(blank=True, help_text='External PO number, contract reference, etc.', max_length=100, verbose_name='External Reference')),
                ('notes', models.TextField(blank=True, help_text='Additional notes and comments', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total before VAT and discounts', max_digits=12, verbose_name='Subtotal')),
                ('discount_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount amount', max_digits=12, verbose_name='Discount Total')),
                ('vat_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total VAT amount', max_digits=12, verbose_name='VAT Total')),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final total including VAT', max_digits=12, verbose_name='Total')),
                ('prices_entered_with_vat', models.BooleanField(blank=True, help_text='Override location settings. NULL means use location defaults', null=True, verbose_name='Prices Include VAT')),
                ('is_paid', models.BooleanField(default=False, help_text='Whether this document has been paid', verbose_name='Is Paid')),
                ('payment_date', models.DateField(blank=True, help_text='When payment was made', null=True, verbose_name='Payment Date')),
                ('payment_method', models.CharField(blank=True, help_text='How payment was made', max_length=50, verbose_name='Payment Method')),
                ('delivery_date', models.DateField(default=django.utils.timezone.now, help_text='Date when goods were delivered', verbose_name='Delivery Date')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when delivery was recorded', verbose_name='Received At')),
                ('quality_status', models.CharField(choices=[('pending', 'Pending Quality Control'), ('approved', 'Quality Approved'), ('rejected', 'Quality Rejected'), ('partial', 'Partially Approved')], default='pending', help_text='Overall quality control status', max_length=20, verbose_name='Quality Status')),
                ('quality_checked_at', models.DateTimeField(blank=True, null=True, verbose_name='Quality Checked At')),
                ('quality_notes', models.TextField(blank=True, help_text='Notes about quality control process', verbose_name='Quality Notes')),
                ('supplier_delivery_reference', models.CharField(blank=True, help_text='Supplier reference for this delivery', max_length=100, verbose_name='Supplier Delivery Reference')),
                ('delivery_driver_name', models.CharField(blank=True, max_length=100, verbose_name='Delivery Driver Name')),
                ('delivery_vehicle_number', models.CharField(blank=True, max_length=50, verbose_name='Vehicle Number')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('document_type', models.ForeignKey(blank=True, help_text='Set by DocumentService on creation', limit_choices_to={'is_active': True}, null=True, on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.documenttype', verbose_name='Document Type')),
                ('location_content_type', models.ForeignKey(blank=True, help_text='Type of location (InventoryLocation, OnlineStore, etc.)', limit_choices_to=models.Q(models.Q(('app_label', 'inventory'), ('model', 'inventorylocation')), models.Q(('app_label', 'sales'), ('model', 'onlinestore')), models.Q(('app_label', 'partners'), ('model', 'customersite')), models.Q(('app_label', 'hr'), ('model', 'office')), _connector='OR'), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_as_location', to='contenttypes.contenttype', verbose_name='Location Type')),
                ('partner_content_type', models.ForeignKey(blank=True, help_text='Type of partner (Supplier, Customer, etc.)', limit_choices_to=models.Q(models.Q(('app_label', 'partners'), ('model__in', ['supplier', 'customer'])), models.Q(('app_label', 'hr'), ('model', 'employee')), _connector='OR'), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_as_partner', to='contenttypes.contenttype', verbose_name='Partner Type')),
                ('quality_checked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='quality_checked_deliveries', to=settings.AUTH_USER_MODEL, verbose_name='Quality Checked By')),
                ('received_by', models.ForeignKey(help_text='User who received the delivery', on_delete=django.db.models.deletion.PROTECT, related_name='received_deliveries', to=settings.AUTH_USER_MODEL, verbose_name='Received By')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
                ('source_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='deliveries', to='purchases.purchaseorder', verbose_name='Source Order')),
            ],
            options={
                'verbose_name': 'Delivery Receipt',
                'verbose_name_plural': 'Delivery Receipts',
                'ordering': ['-delivery_date', '-received_at'],
                'permissions': [('can_receive_delivery', 'Can receive deliveries'), ('can_perform_quality_control', 'Can perform quality control'), ('can_process_to_inventory', 'Can process deliveries to inventory'), ('can_view_quality_details', 'Can view quality control details')],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_number', models.PositiveSmallIntegerField(help_text='Sequential line number within document', verbose_name='Line Number')),
                ('description', models.TextField(blank=True, help_text='Additional description for this line', verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('entered_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price as entered by user (may include VAT)', max_digits=10, null=True, verbose_name='Entered Price')),
                ('unit_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Unit price WITHOUT VAT (stored value)', max_digits=10, verbose_name='Unit Price')),
                ('unit_price_with_vat', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Unit price INCLUDING VAT (calculated)', max_digits=10, verbose_name='Unit Price with VAT')),
                ('vat_rate', models.DecimalField(decimal_places=3, default=Decimal('0.200'), help_text='VAT rate (0.20 = 20%)', max_digits=5, verbose_name='VAT Rate')),
                ('vat_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='VAT amount for this line', max_digits=10, verbose_name='VAT Amount')),
                ('discount_percent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage', max_digits=5, verbose_name='Discount %')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount amount', max_digits=10, verbose_name='Discount Amount')),
                ('net_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Line amount excluding VAT', max_digits=12, verbose_name='Net Amount')),
                ('gross_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Line amount including VAT', max_digits=12, verbose_name='Gross Amount')),
                ('ordered_quantity', models.DecimalField(decimal_places=3, help_text='Quantity ordered from supplier', max_digits=15, verbose_name='Ordered Quantity')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='purchases.purchaseorder', verbose_name='Purchase Order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product', verbose_name='Product')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.unitofmeasure', verbose_name='Unit of Measure')),
            ],
            options={
                'verbose_name': 'Purchase Order Line',
                'verbose_name_plural': 'Purchase Order Lines',
                'ordering': ['document', 'line_number'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_number', models.PositiveSmallIntegerField(help_text='Sequential line number within document', verbose_name='Line Number')),
                ('description', models.TextField(blank=True, help_text='Additional description for this line', verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('entered_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price as entered by user (may include VAT)', max_digits=10, null=True, verbose_name='Entered Price')),
                ('unit_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Unit price WITHOUT VAT (stored value)', max_digits=10, verbose_name='Unit Price')),
                ('unit_price_with_vat', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Unit price INCLUDING VAT (calculated)', max_digits=10, verbose_name='Unit Price with VAT')),
                ('vat_rate', models.DecimalField(decimal_places=3, default=Decimal('0.200'), help_text='VAT rate (0.20 = 20%)', max_digits=5, verbose_name='VAT Rate')),
                ('vat_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='VAT amount for this line', max_digits=10, verbose_name='VAT Amount')),
                ('discount_percent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount percentage', max_digits=5, verbose_name='Discount %')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount amount', max_digits=10, verbose_name='Discount Amount')),
                ('net_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Line amount excluding VAT', max_digits=12, verbose_name='Net Amount')),
                ('gross_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Line amount including VAT', max_digits=12, verbose_name='Gross Amount')),
                ('received_quantity', models.DecimalField(decimal_places=3, help_text='Actual quantity received from supplier', max_digits=15, verbose_name='Received Quantity')),
                ('quality_approved', models.BooleanField(help_text='True=approved, False=rejected, None=pending quality check', null=True, verbose_name='Quality Approved')),
                ('quality_issue_type', models.CharField(blank=True, choices=[('', 'No Issues'), ('damaged', 'Damaged'), ('expired', 'Expired'), ('wrong_product', 'Wrong Product'), ('wrong_quantity', 'Wrong Quantity'), ('poor_quality', 'Poor Quality'), ('packaging_issues', 'Packaging Issues'), ('other', 'Other Issues')], help_text='Type of quality issue if rejected', max_length=20, verbose_name='Quality Issue Type')),
                ('quality_notes', models.TextField(blank=True, help_text='Detailed notes about quality control', verbose_name='Quality Notes')),
                ('quality_checked_at', models.DateTimeField(blank=True, null=True, verbose_name='Quality Checked At')),
                ('batch_number', models.CharField(blank=True, help_text='Batch/lot number for traceability', max_length=50, verbose_name='Batch Number')),
                ('expiry_date', models.DateField(blank=True, help_text='Product expiry date for this batch', null=True, verbose_name='Expiry Date')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product', verbose_name='Product')),
                ('quality_checked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='quality_checked_delivery_lines', to=settings.AUTH_USER_MODEL, verbose_name='Quality Checked By')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.unitofmeasure', verbose_name='Unit of Measure')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='purchases.deliveryreceipt', verbose_name='Delivery Receipt')),
                ('source_order_line', models.ForeignKey(blank=True, help_text='Order line this delivery fulfills', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='delivery_lines', to='purchases.purchaseorderline', verbose_name='Source Order Line')),
            ],
            options={
                'verbose_name': 'Delivery Line',
                'verbose_name_plural': 'Delivery Lines',
                'ordering': ['document', 'line_number'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_number', models.CharField(blank=True, help_text='Generated by DocumentService', max_length=50, unique=True, verbose_name='Document Number')),
                ('document_date', models.DateField(default=django.utils.timezone.now, help_text='Date when document was created', verbose_name='Document Date')),
                ('status', models.CharField(blank=True, help_text='Managed by DocumentService', max_length=30, verbose_name='Status')),
                ('partner_object_id', models.PositiveIntegerField(blank=True, help_text='ID of the partner object', null=True, verbose_name='Partner ID')),
                ('location_object_id', models.PositiveIntegerField(blank=True, help_text='ID of the location object', null=True, verbose_name='Location ID')),
                ('external_reference', models.CharField(blank=True, help_text='External PO number, contract reference, etc.', max_length=100, verbose_name='External Reference')),
                ('notes', models.TextField(blank=True, help_text='Additional notes and comments', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total before VAT and discounts', max_digits=12, verbose_name='Subtotal')),
                ('discount_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount amount', max_digits=12, verbose_name='Discount Total')),
                ('vat_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total VAT amount', max_digits=12, verbose_name='VAT Total')),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Final total including VAT', max_digits=12, verbose_name='Total')),
                ('prices_entered_with_vat', models.BooleanField(blank=True, help_text='Override location settings. NULL means use location defaults', null=True, verbose_name='Prices Include VAT')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', help_text='Request priority level', max_length=20, verbose_name='Priority')),
                ('required_by_date', models.DateField(blank=True, help_text='When the items are needed', null=True, verbose_name='Required By Date')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approved At')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable', verbose_name='Rejection Reason')),
                ('converted_at', models.DateTimeField(blank=True, null=True, verbose_name='Converted At')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_purchase_requests', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('converted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='converted_purchase_requests', to=settings.AUTH_USER_MODEL, verbose_name='Converted By')),
                ('converted_to_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='purchases.purchaseorder', verbose_name='Converted to Order')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('document_type', models.ForeignKey(blank=True, help_text='Set by DocumentService on creation', limit_choices_to={'is_active': True}, null=True, on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.documenttype', verbose_name='Document Type')),
                ('location_content_type', models.ForeignKey(blank=True, help_text='Type of location (InventoryLocation, OnlineStore, etc.)', limit_choices_to=models.Q(models.Q(('app_label', 'inventory'), ('model', 'inventorylocation')), models.Q(('app_label', 'sales'), ('model', 'onlinestore')), models.Q(('app_label', 'partners'), ('model', 'customersite')), models.Q(('app_label', 'hr'), ('model', 'office')), _connector='OR'), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_as_location', to='contenttypes.contenttype', verbose_name='Location Type')),
                ('partner_content_type', models.ForeignKey(blank=True, help_text='Type of partner (Supplier, Customer, etc.)', limit_choices_to=models.Q(models.Q(('app_label', 'partners'), ('model__in', ['supplier', 'customer'])), models.Q(('app_label', 'hr'), ('model', 'employee')), _connector='OR'), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_as_partner', to='contenttypes.contenttype', verbose_name='Partner Type')),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Purchase Request',
                'verbose_name_plural': 'Purchase Requests',
                'ordering': ['-created_at'],
                'permissions': [('can_approve_purchase_request', 'Can approve purchase requests'), ('can_convert_to_order', 'Can convert requests to orders'), ('can_view_financial_summary', 'Can view financial summary')],
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='source_request',
            field=models.ForeignKey(blank=True, help_text='Request this order was created from (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sourced_orders', to='purchases.purchaserequest', verbose_name='Source Request'),
        ),
        migrations.CreateModel(
            name='PurchaseRequestLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_number', models.PositiveSmallIntegerField(help_text='Sequential line number within document', verbose_name='Line Number')),
                ('description', models.TextField(blank=True, help_text='Additional description for this line', verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('requested_quantity', models.DecimalField(decimal_places=3, help_text='Quantity requested in specified unit', max_digits=15, verbose_name='Requested Quantity')),
                ('estimated_price', models.DecimalField(blank=True, decimal_places=4, help_text='Estimated unit price for budgeting', max_digits=15, null=True, verbose_name='Estimated Price')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='purchases.purchaserequest', verbose_name='Request')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='products.product', verbose_name='Product')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.unitofmeasure', verbose_name='Unit of Measure')),
            ],
            options={
                'verbose_name': 'Purchase Request Line',
                'verbose_name_plural': 'Purchase Request Lines',
                'ordering': ['document', 'line_number'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorderline',
            name='source_request_line',
            field=models.ForeignKey(blank=True, help_text='Original request line this order line was created from', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='converted_to_order_line', to='purchases.purchaserequestline', verbose_name='Source Request Line'),
        ),
        migrations.AddIndex(
            model_name='deliveryreceipt',
            index=models.Index(fields=['quality_status', 'quality_checked_at'], name='purchases_d_quality_a2f219_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryreceipt',
            index=models.Index(fields=['source_order'], name='purchases_d_source__b8f366_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryreceipt',
            index=models.Index(fields=['received_by', 'received_at'], name='purchases_d_receive_f4fd1e_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryreceipt',
            index=models.Index(fields=['status', 'delivery_date'], name='purchases_d_status_d58c24_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryline',
            index=models.Index(fields=['document', 'line_number'], name='purchases_d_documen_031364_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryline',
            index=models.Index(fields=['product'], name='purchases_d_product_57edd9_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryline',
            index=models.Index(fields=['quality_approved', 'quality_checked_at'], name='purchases_d_quality_045615_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryline',
            index=models.Index(fields=['source_order_line'], name='purchases_d_source__5f6594_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryline',
            index=models.Index(fields=['batch_number'], name='purchases_d_batch_n_fb4cf6_idx'),
        ),
        migrations.AddIndex(
            model_name='deliveryline',
            index=models.Index(fields=['expiry_date'], name='purchases_d_expiry__36960a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='deliveryline',
            unique_together={('document', 'line_number')},
        ),
        migrations.AddIndex(
            model_name='purchaserequest',
            index=models.Index(fields=['status', 'created_at'], name='purchases_p_status_e74967_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaserequest',
            index=models.Index(fields=['approved_by', 'approved_at'], name='purchases_p_approve_41e38c_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaserequest',
            index=models.Index(fields=['required_by_date'], name='purchases_p_require_718aa0_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['status', 'created_at'], name='purchases_p_status_5df029_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['supplier_confirmed', 'supplier_confirmed_date'], name='purchases_p_supplie_fb7353_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['expected_delivery_date'], name='purchases_p_expecte_17bb41_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['source_request'], name='purchases_p_source__2efefc_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaserequestline',
            index=models.Index(fields=['document', 'line_number'], name='purchases_p_documen_f53882_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaserequestline',
            index=models.Index(fields=['product'], name='purchases_p_product_918f59_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='purchaserequestline',
            unique_together={('document', 'line_number')},
        ),
        migrations.AddIndex(
            model_name='purchaseorderline',
            index=models.Index(fields=['document', 'line_number'], name='purchases_p_documen_63f32e_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorderline',
            index=models.Index(fields=['product'], name='purchases_p_product_052d2c_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorderline',
            index=models.Index(fields=['source_request_line'], name='purchases_p_source__4a4166_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='purchaseorderline',
            unique_together={('document', 'line_number')},
        ),
    ]
