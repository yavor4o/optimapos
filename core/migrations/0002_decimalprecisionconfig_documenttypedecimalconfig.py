# Generated by Django 5.2.3 on 2025-08-30 12:50

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        ('nomenclatures', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DecimalPrecisionConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.CharField(choices=[('currency', 'Currency/Money Amounts'), ('vat', 'VAT Calculations'), ('tax_base', 'Tax Base Calculations'), ('quantity', 'Quantities'), ('percentage', 'Percentages'), ('cost_price', 'Cost Prices'), ('profit', 'Profit Calculations'), ('discount', 'Discount Calculations'), ('inventory', 'Inventory Valuations'), ('reporting', 'Financial Reporting')], help_text='The calculation context this configuration applies to', max_length=50, unique=True, verbose_name='Context')),
                ('decimal_places', models.PositiveSmallIntegerField(help_text='Number of decimal places for this context', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Decimal Places')),
                ('rounding_strategy', models.CharField(choices=[('ROUND_HALF_UP', 'Round Half Up (Standard Commercial)'), ('ROUND_HALF_EVEN', "Round Half Even (Banker's Rounding)"), ('ROUND_UP', 'Round Up (Always)'), ('ROUND_DOWN', 'Round Down (Always)'), ('ROUND_CEILING', 'Round Ceiling'), ('ROUND_FLOOR', 'Round Floor')], default='ROUND_HALF_UP', help_text='Rounding strategy to use for this context', max_length=20, verbose_name='Rounding Strategy')),
                ('is_legally_required', models.BooleanField(default=False, help_text='Whether this precision is required by law (cannot be changed)', verbose_name='Legally Required')),
                ('legal_reference', models.CharField(blank=True, help_text='Legal reference for this requirement (e.g. "Наредба № 3/2006")', max_length=200, verbose_name='Legal Reference')),
                ('description', models.TextField(blank=True, help_text='Description of when this configuration is used', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_decimal_configs', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='updated_decimal_configs', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Decimal Precision Configuration',
                'verbose_name_plural': 'Decimal Precision Configurations',
                'ordering': ['context'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeDecimalConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context', models.CharField(choices=[('currency', 'Currency/Money Amounts'), ('vat', 'VAT Calculations'), ('tax_base', 'Tax Base Calculations'), ('quantity', 'Quantities'), ('percentage', 'Percentages'), ('cost_price', 'Cost Prices'), ('profit', 'Profit Calculations'), ('discount', 'Discount Calculations'), ('inventory', 'Inventory Valuations'), ('reporting', 'Financial Reporting')], help_text='The calculation context for this document type', max_length=50, verbose_name='Context')),
                ('decimal_places', models.PositiveSmallIntegerField(help_text='Number of decimal places for this document type and context', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Decimal Places')),
                ('rounding_strategy', models.CharField(choices=[('ROUND_HALF_UP', 'Round Half Up (Standard Commercial)'), ('ROUND_HALF_EVEN', "Round Half Even (Banker's Rounding)"), ('ROUND_UP', 'Round Up (Always)'), ('ROUND_DOWN', 'Round Down (Always)'), ('ROUND_CEILING', 'Round Ceiling'), ('ROUND_FLOOR', 'Round Floor')], default='ROUND_HALF_UP', help_text='Rounding strategy for this document type and context', max_length=20, verbose_name='Rounding Strategy')),
                ('overrides_global', models.BooleanField(default=True, help_text='Whether this config overrides the global configuration', verbose_name='Overrides Global')),
                ('priority', models.PositiveSmallIntegerField(default=100, help_text='Priority when multiple configs could apply (lower = higher priority)', verbose_name='Priority')),
                ('description', models.TextField(blank=True, help_text='Description of this specific configuration', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='decimal_configs', to='nomenclatures.documenttype', verbose_name='Document Type')),
            ],
            options={
                'verbose_name': 'Document Type Decimal Configuration',
                'verbose_name_plural': 'Document Type Decimal Configurations',
                'ordering': ['document_type__name', 'context', 'priority'],
                'unique_together': {('document_type', 'context')},
            },
        ),
    ]
