from django.core.management.base import BaseCommand
from django.db import transaction
from nomenclatures.models import Currency, TaxGroup, UnitOfMeasure, PaymentType


class Command(BaseCommand):
    help = '–ó–∞—Ä–µ–∂–¥–∞ —Å–∞–º–æ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞'

    @transaction.atomic
    def handle(self, *args, **options):
        self.stdout.write('–ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏...\n')

        # 1. –ë–∞–∑–æ–≤–∞ –≤–∞–ª—É—Ç–∞ - –ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ù–û
        self.stdout.write('1. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –±–∞–∑–æ–≤–∞ –≤–∞–ª—É—Ç–∞...')
        bgn, created = Currency.objects.get_or_create(
            code='BGN',
            defaults={
                'name': '–ë—ä–ª–≥–∞—Ä—Å–∫–∏ –ª–µ–≤',
                'symbol': '–ª–≤',
                'is_base': True,
                'decimal_places': 2,
                'is_active': True
            }
        )
        self.stdout.write(self.style.SUCCESS(f'  ‚úì BGN {"—Å—ä–∑–¥–∞–¥–µ–Ω" if created else "–≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞"}'))

        # 2. –û—Å–Ω–æ–≤–Ω–∏ –¥–∞–Ω—ä—á–Ω–∏ –≥—Ä—É–ø–∏ - –ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ù–û
        self.stdout.write('\n2. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –î–î–° –≥—Ä—É–ø–∏...')
        tax_groups = [
            {'code': 'VAT20', 'name': '–î–î–° 20%', 'rate': 20, 'is_default': True},
            {'code': 'VAT9', 'name': '–î–î–° 9%', 'rate': 9},
            {'code': 'VAT0', 'name': '–î–î–° 0%', 'rate': 0},
        ]

        for tg_data in tax_groups:
            tg, created = TaxGroup.objects.get_or_create(
                code=tg_data['code'],
                defaults=tg_data
            )
            self.stdout.write(self.style.SUCCESS(
                f'  ‚úì {tg.name} {"—Å—ä–∑–¥–∞–¥–µ–Ω–∞" if created else "–≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞"}'
            ))

        # 3. –ú–∏–Ω–∏–º–∞–ª–Ω–∏ –º–µ—Ä–Ω–∏ –µ–¥–∏–Ω–∏—Ü–∏ - –ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ù–û
        self.stdout.write('\n3. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏ –º–µ—Ä–Ω–∏ –µ–¥–∏–Ω–∏—Ü–∏...')
        units = [
            {
                'code': 'PCS',
                'name': '–ë—Ä–æ–π',
                'symbol': '–±—Ä',
                'unit_type': UnitOfMeasure.PIECE,
                'allow_decimals': False,
                'decimal_places': 0
            },
            {
                'code': 'KG',
                'name': '–ö–∏–ª–æ–≥—Ä–∞–º',
                'symbol': '–∫–≥',
                'unit_type': UnitOfMeasure.WEIGHT,
                'allow_decimals': True,
                'decimal_places': 3
            },
        ]

        for unit_data in units:
            unit, created = UnitOfMeasure.objects.get_or_create(
                code=unit_data['code'],
                defaults=unit_data
            )
            self.stdout.write(self.style.SUCCESS(
                f'  ‚úì {unit.name} {"—Å—ä–∑–¥–∞–¥–µ–Ω–∞" if created else "–≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞"}'
            ))

        # 4. –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω —Ç–∏–ø –ø–ª–∞—â–∞–Ω–µ - –ó–ê–î–™–õ–ñ–ò–¢–ï–õ–ù–û –ø–æ–Ω–µ –µ–¥–∏–Ω
        self.stdout.write('\n4. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ —Ç–∏–ø –ø–ª–∞—â–∞–Ω–µ –≤ –±—Ä–æ–π...')
        cash_payment, created = PaymentType.objects.get_or_create(
            key=PaymentType.CASH,
            defaults={
                'code': '001',
                'name': '–í –±—Ä–æ–π',
                'is_cash': True,
                'allows_change': True,
                'is_fiscal': True,
                'sort_order': 1,
                'is_active': True
            }
        )
        self.stdout.write(self.style.SUCCESS(
            f'  ‚úì –ü–ª–∞—â–∞–Ω–µ –≤ –±—Ä–æ–π {"—Å—ä–∑–¥–∞–¥–µ–Ω–æ" if created else "–≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞"}'
        ))

        # –§–∏–Ω–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
        self.stdout.write('\n' + '=' * 50)
        self.stdout.write(self.style.SUCCESS('\n‚úÖ –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏—Ç–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∏ —Å–∞ –≥–æ—Ç–æ–≤–∏!'))
        self.stdout.write('\n–°–∏—Å—Ç–µ–º–∞—Ç–∞ –º–æ–∂–µ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —Å:')
        self.stdout.write('  ‚Ä¢ 1 –±–∞–∑–æ–≤–∞ –≤–∞–ª—É—Ç–∞ (BGN)')
        self.stdout.write('  ‚Ä¢ 2 –î–î–° –≥—Ä—É–ø–∏ (20% –∏ 0%)')
        self.stdout.write('  ‚Ä¢ 2 –º–µ—Ä–Ω–∏ –µ–¥–∏–Ω–∏—Ü–∏ (–±—Ä–æ–π –∏ –∫–∏–ª–æ–≥—Ä–∞–º)')
        self.stdout.write('  ‚Ä¢ 1 —Ç–∏–ø –ø–ª–∞—â–∞–Ω–µ (–≤ –±—Ä–æ–π)')

        self.stdout.write('\nüí° –°—ä–≤–µ—Ç: –ó–∞ –ø—ä–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç –∏–∑–ø—ä–ª–Ω–µ—Ç–µ:')
        self.stdout.write('   python manage.py load_full_nomenclatures')