# Generated by Django 5.2.3 on 2025-07-15 17:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        ('nomenclatures', '0002_pricegroup'),
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PackagingPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price for the entire packaging unit', max_digits=10, verbose_name='Packaging Price')),
                ('pricing_method', models.CharField(choices=[('FIXED', 'Fixed Price'), ('MARKUP', 'Markup on Base Unit'), ('AUTO', 'Auto (from base unit price)')], default='FIXED', max_length=20, verbose_name='Pricing Method')),
                ('markup_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Markup % over base unit price', max_digits=5, null=True, verbose_name='Markup Percentage')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Discount % from calculated base price', max_digits=5, verbose_name='Discount Percentage')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packaging_prices', to='inventory.inventorylocation', verbose_name='Location')),
                ('packaging', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_prices', to='products.productpackaging', verbose_name='Packaging')),
            ],
            options={
                'verbose_name': 'Packaging Price',
                'verbose_name_plural': 'Packaging Prices',
                'ordering': ['location', 'packaging__product', 'packaging__unit'],
                'unique_together': {('location', 'packaging')},
            },
        ),
        migrations.CreateModel(
            name='ProductPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed base selling price', max_digits=10, null=True, verbose_name='Base Price')),
                ('markup_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Markup % over cost price', max_digits=5, null=True, verbose_name='Markup Percentage')),
                ('effective_price', models.DecimalField(decimal_places=2, default=0, help_text='Calculated effective selling price', max_digits=10, verbose_name='Effective Price')),
                ('pricing_method', models.CharField(choices=[('FIXED', 'Fixed Price'), ('MARKUP', 'Markup on Cost'), ('AUTO', 'Auto (Location Default)')], default='FIXED', max_length=20, verbose_name='Pricing Method')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('last_cost_update', models.DateTimeField(blank=True, null=True, verbose_name='Last Cost Update')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_prices', to='inventory.inventorylocation', verbose_name='Location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_prices', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Price',
                'verbose_name_plural': 'Product Prices',
                'ordering': ['location', 'product'],
                'unique_together': {('location', 'product')},
            },
        ),
        migrations.CreateModel(
            name='ProductPriceByGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, help_text='Special price for this group', max_digits=10, verbose_name='Group Price')),
                ('min_quantity', models.DecimalField(decimal_places=3, default=1, help_text='Minimum quantity to get this price', max_digits=10, verbose_name='Minimum Quantity')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_prices', to='inventory.inventorylocation', verbose_name='Location')),
                ('price_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_group_prices', to='nomenclatures.pricegroup', verbose_name='Price Group')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_prices', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Price by Group',
                'verbose_name_plural': 'Product Prices by Group',
                'ordering': ['location', 'product', 'price_group'],
                'unique_together': {('location', 'product', 'price_group', 'min_quantity')},
            },
        ),
        migrations.CreateModel(
            name='ProductStepPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_quantity', models.DecimalField(decimal_places=3, help_text='Minimum quantity to get this price', max_digits=10, verbose_name='Minimum Quantity')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price for this quantity step', max_digits=10, verbose_name='Step Price')),
                ('description', models.CharField(blank=True, help_text='Optional description for this price step', max_length=100, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_prices', to='inventory.inventorylocation', verbose_name='Location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='step_prices', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Product Step Price',
                'verbose_name_plural': 'Product Step Prices',
                'ordering': ['location', 'product', 'min_quantity'],
                'unique_together': {('location', 'product', 'min_quantity')},
            },
        ),
        migrations.CreateModel(
            name='PromotionalPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this promotion', max_length=100, verbose_name='Promotion Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the promotion', verbose_name='Description')),
                ('promotional_price', models.DecimalField(decimal_places=2, help_text='Special promotional price', max_digits=10, verbose_name='Promotional Price')),
                ('start_date', models.DateField(help_text='When the promotion becomes active', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='When the promotion expires', verbose_name='End Date')),
                ('min_quantity', models.DecimalField(decimal_places=3, default=1, help_text='Minimum quantity to get promotional price', max_digits=10, verbose_name='Minimum Quantity')),
                ('max_quantity', models.DecimalField(blank=True, decimal_places=3, help_text='Maximum quantity per transaction (optional)', max_digits=10, null=True, verbose_name='Maximum Quantity')),
                ('priority', models.IntegerField(default=0, help_text='Higher priority takes precedence when promotions overlap', verbose_name='Priority')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('customer_groups', models.ManyToManyField(blank=True, help_text='Limit promotion to specific customer groups (leave empty for all)', related_name='promotions', to='nomenclatures.pricegroup', verbose_name='Customer Groups')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotional_prices', to='inventory.inventorylocation', verbose_name='Location')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotional_prices', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Promotional Price',
                'verbose_name_plural': 'Promotional Prices',
                'ordering': ['-priority', 'start_date', 'location', 'product'],
                'indexes': [models.Index(fields=['start_date', 'end_date'], name='pricing_pro_start_d_0ef7e8_idx'), models.Index(fields=['location', 'product', 'start_date'], name='pricing_pro_locatio_349c9c_idx')],
            },
        ),
    ]
