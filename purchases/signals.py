# purchases/signals.py - CLEANED UP VERSION

from django.db.models.signals import post_save, post_delete, pre_delete, pre_save
from django.dispatch import receiver
from django.utils import timezone
import logging

from .models import (
    PurchaseRequest, PurchaseRequestLine,
    PurchaseOrder, PurchaseOrderLine,
    DeliveryReceipt, DeliveryLine
)

logger = logging.getLogger(__name__)


# =================================================================
# AUDIT & LOGGING SIGNALS - –ó–ê–ü–ê–ó–í–ê–ú–ï
# =================================================================

@receiver(post_save, sender=PurchaseRequest)
def log_request_changes(sender, instance, created, **kwargs):
    """–°–ê–ú–û LOGGING - –ë–ï–ó business logic"""

    if created:
        logger.info(f"üìÑ New purchase request created: {instance.document_number}")
        _log_document_action(instance, 'created')
        return

    # Log status changes –°–ê–ú–û –∑–∞ audit
    if hasattr(instance, '_original_status'):
        old_status = instance._original_status
        new_status = instance.status

        if old_status != new_status:
            logger.info(f"üìã Request {instance.document_number} status: {old_status} -> {new_status}")
            _log_document_action(instance, f'status_changed_to_{new_status}', {
                'old_status': old_status,
                'new_status': new_status
            })


@receiver(post_save, sender=PurchaseOrder)
def log_order_changes(sender, instance, created, **kwargs):
    """–°–ê–ú–û LOGGING - –ë–ï–ó business logic"""

    if created:
        logger.info(f"üì¶ New purchase order created: {instance.document_number}")
        _log_document_action(instance, 'created')

    # Log status changes –°–ê–ú–û –∑–∞ audit
    if hasattr(instance, '_original_status'):
        old_status = instance._original_status
        new_status = instance.status

        if old_status != new_status:
            logger.info(f"üìã Order {instance.document_number} status: {old_status} -> {new_status}")
            _log_document_action(instance, f'status_changed_to_{new_status}', {
                'old_status': old_status,
                'new_status': new_status
            })


@receiver(post_save, sender=DeliveryReceipt)
def log_delivery_changes(sender, instance, created, **kwargs):
    """–°–ê–ú–û LOGGING - –ë–ï–ó business logic"""

    if created:
        logger.info(f"üöö New delivery receipt created: {instance.document_number}")
        _log_document_action(instance, 'created')

    # Log status changes –°–ê–ú–û –∑–∞ audit
    if hasattr(instance, '_original_status'):
        old_status = instance._original_status
        new_status = instance.status

        if old_status != new_status:
            logger.info(f"üìã Delivery {instance.document_number} status: {old_status} -> {new_status}")
            _log_document_action(instance, f'status_changed_to_{new_status}', {
                'old_status': old_status,
                'new_status': new_status
            })


# =================================================================
# TOTALS RECALCULATION SIGNALS - –ó–ê–ü–ê–ó–í–ê–ú–ï
# =================================================================

@receiver(post_save, sender=PurchaseRequestLine)
def update_request_totals_on_line_save(sender, instance, **kwargs):
    """
    ‚úÖ –ü–†–û–§–ï–°–ò–û–ù–ê–õ–ù–û: Manual totals update when lines change

    Calls save() which will trigger recalculate_totals() internally
    """
    if instance.document_id:
        try:
            # ‚úÖ PROFESSIONAL: Just save the document,
            # save() method will handle totals calculation
            instance.document.save()
            logger.debug(f"üí∞ Updated totals for request {instance.document.document_number}")
        except Exception as e:
            logger.error(f"‚ùå Error updating request totals: {e}")


@receiver(post_save, sender=PurchaseOrderLine)
def update_order_totals_on_line_save(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Recalculate totals when line is saved"""
    if instance.document_id:
        try:
            instance.document.recalculate_totals()
            logger.debug(f"üí∞ Recalculated totals for order {instance.document.document_number}")
        except Exception as e:
            logger.error(f"‚ùå Error recalculating order totals: {e}")


@receiver(post_save, sender=DeliveryLine)
def update_delivery_totals_on_line_save(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Recalculate totals when line is saved"""
    if instance.document_id:
        try:
            instance.document.recalculate_totals()
            logger.debug(f"üí∞ Recalculated totals for delivery {instance.document.document_number}")
        except Exception as e:
            logger.error(f"‚ùå Error recalculating delivery totals: {e}")


# =================================================================
# CLEANUP SIGNALS - –ó–ê–ü–ê–ó–í–ê–ú–ï
# =================================================================

@receiver(pre_delete, sender=PurchaseRequestLine)
def preserve_request_id_before_line_delete(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Preserve request ID before line deletion"""
    instance._document_id_for_cleanup = instance.document_id


@receiver(post_delete, sender=PurchaseRequestLine)
def cleanup_request_totals_on_line_delete(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Recalculate totals when line is deleted"""
    if hasattr(instance, '_document_id_for_cleanup') and instance._document_id_for_cleanup:
        try:
            request = PurchaseRequest.objects.get(pk=instance._document_id_for_cleanup)
            request.recalculate_totals()
            logger.info(f"üí∞ Recalculated totals for request {request.document_number} after line deletion")
        except PurchaseRequest.DoesNotExist:
            logger.warning(f"‚ö†Ô∏è Request with ID {instance._document_id_for_cleanup} not found during cleanup")


@receiver(pre_delete, sender=PurchaseOrderLine)
def preserve_order_id_before_line_delete(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Preserve order ID before line deletion"""
    instance._document_id_for_cleanup = instance.document_id


@receiver(post_delete, sender=PurchaseOrderLine)
def cleanup_order_totals_on_line_delete(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Recalculate totals when line is deleted"""
    if hasattr(instance, '_document_id_for_cleanup') and instance._document_id_for_cleanup:
        try:
            order = PurchaseOrder.objects.get(pk=instance._document_id_for_cleanup)
            order.recalculate_totals()
            logger.info(f"üí∞ Recalculated totals for order {order.document_number} after line deletion")
        except PurchaseOrder.DoesNotExist:
            logger.warning(f"‚ö†Ô∏è Order with ID {instance._document_id_for_cleanup} not found during cleanup")


@receiver(pre_delete, sender=DeliveryLine)
def preserve_delivery_id_before_line_delete(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Preserve delivery ID before line deletion"""
    instance._document_id_for_cleanup = instance.document_id


@receiver(post_delete, sender=DeliveryLine)
def cleanup_delivery_totals_on_line_delete(sender, instance, **kwargs):
    """–ó–ê–ü–ê–ó–í–ê–ú–ï - Recalculate totals when line is deleted"""
    if hasattr(instance, '_document_id_for_cleanup') and instance._document_id_for_cleanup:
        try:
            delivery = DeliveryReceipt.objects.get(pk=instance._document_id_for_cleanup)
            delivery.recalculate_totals()
            logger.info(f"üí∞ Recalculated totals for delivery {delivery.document_number} after line deletion")
        except DeliveryReceipt.DoesNotExist:
            logger.warning(f"‚ö†Ô∏è Delivery with ID {instance._document_id_for_cleanup} not found during cleanup")


# =================================================================
# STATUS TRACKING SIGNALS - –ó–ê–ü–ê–ó–í–ê–ú–ï –ó–ê LOGGING
# =================================================================

@receiver(pre_save, sender=PurchaseRequest)
def track_request_status_changes(sender, instance, **kwargs):
    """Track status changes –°–ê–ú–û –∑–∞ logging purposes"""
    if instance.pk:
        try:
            original = PurchaseRequest.objects.get(pk=instance.pk)
            instance._original_status = original.status
        except PurchaseRequest.DoesNotExist:
            instance._original_status = None


@receiver(pre_save, sender=PurchaseOrder)
def track_order_status_changes(sender, instance, **kwargs):
    """Track status changes –°–ê–ú–û –∑–∞ logging purposes"""
    if instance.pk:
        try:
            original = PurchaseOrder.objects.get(pk=instance.pk)
            instance._original_status = original.status
        except PurchaseOrder.DoesNotExist:
            instance._original_status = None


@receiver(pre_save, sender=DeliveryReceipt)
def track_delivery_status_changes(sender, instance, **kwargs):
    """Track status changes –°–ê–ú–û –∑–∞ logging purposes"""
    if instance.pk:
        try:
            original = DeliveryReceipt.objects.get(pk=instance.pk)
            instance._original_status = original.status
        except DeliveryReceipt.DoesNotExist:
            instance._original_status = None


# =================================================================
# HELPER FUNCTIONS - –ó–ê–ü–ê–ó–í–ê–ú–ï
# =================================================================

def _log_document_action(document, action, extra_data=None):
    """Helper function –∑–∞ audit logging"""
    try:
        # Simplified logging - –º–æ–∂–µ–º –¥–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–∞–º–µ —Å audit —Å–∏—Å—Ç–µ–º–∞
        log_data = {
            'document_type': document.__class__.__name__,
            'document_number': document.document_number,
            'action': action,
            'timestamp': timezone.now().isoformat(),
            'user': getattr(document, 'updated_by', None),
        }

        if extra_data:
            log_data.update(extra_data)

        # –ó–∞ —Å–µ–≥–∞ —Å–∞–º–æ logging, –Ω–æ –º–æ–∂–µ–º –¥–∞ –¥–æ–±–∞–≤–∏–º persistent audit trail
        logger.info(f"üìã Document action: {log_data}")

    except Exception as e:
        logger.error(f"‚ùå Error logging document action: {e}")


# =================================================================
# –ü–†–ï–ú–ê–•–ù–ê–¢–ò SIGNALS - –°–ï–ì–ê –°–ê –í WorkflowService
# =================================================================

# –ü–†–ï–ú–ê–•–ù–ê–¢–û: handle_request_status_changes - business logic
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: _handle_request_approved - business logic
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: _handle_request_converted - business logic
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: _handle_order_sent - business logic
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: _handle_order_confirmed - business logic
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: _handle_delivery_completed - business logic
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: handle_delivery_source_orders_changed - business logic
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: MovementService calls - —Å–µ–≥–∞ –≤ WorkflowService
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: Workflow transitions - —Å–µ–≥–∞ –≤ WorkflowService
# –ü–†–ï–ú–ê–•–ù–ê–¢–û: Auto-conversions - —Å–µ–≥–∞ –≤ WorkflowService

# –í–°–Ø BUSINESS LOGIC –ï –ü–†–ï–ú–ï–°–¢–ï–ù–ê –í WorkflowService!


# =================================================================
# DEPRECATED COMMENT - INFORMATION ABOUT MIGRATION
# =================================================================

"""
MIGRATION NOTES:

–ü—Ä–µ–º–∞—Ö–Ω–∞—Ç–∏ business logic signals:
- handle_request_status_changes() ‚Üí WorkflowService
- _handle_request_approved() ‚Üí WorkflowService._execute_post_transition_actions() 
- _handle_request_converted() ‚Üí WorkflowService._handle_document_conversions()
- _handle_order_sent() ‚Üí WorkflowService
- _handle_order_confirmed() ‚Üí WorkflowService
- _handle_delivery_completed() ‚Üí WorkflowService + MovementService

–ó–∞–ø–∞–∑–µ–Ω–∏ signals:
‚úÖ Audit logging (post_save document signals)
‚úÖ Totals recalculation (post_save line signals)  
‚úÖ Cleanup operations (pre_delete/post_delete line signals)
‚úÖ Status tracking (pre_save for logging)

–ù–æ–≤–æ—Ç–æ –º–µ—Å—Ç–æ –∑–∞ business logic:
üéØ WorkflowService.transition_document()
üéØ WorkflowService._execute_post_transition_actions()
üéØ WorkflowService._handle_inventory_movements()
üéØ WorkflowService._handle_document_conversions()
"""