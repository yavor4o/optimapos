# purchases/forms.py

from decimal import Decimal
from django import forms
from django.forms import formset_factory
from django.core.exceptions import ValidationError
from products.models import Product
from nomenclatures.models import UnitOfMeasure
from partners.models import Supplier
from inventory.models import InventoryLocation
from core.utils.error_codes import PurchaseErrorCodes, ErrorMessages
from core.utils.decimal_utils import round_currency
from .models.deliveries import DeliveryReceipt


class DeliveryReceiptForm(forms.Form):
    """
    üÜï Main form for delivery receipt - includes ALL required fields
    """
    partner_id = forms.ModelChoiceField(
        queryset=Supplier.objects.filter(is_active=True),
        empty_label="–ò–∑–±–µ—Ä–µ—Ç–µ –¥–æ—Å—Ç–∞–≤—á–∏–∫...",
        error_messages={
            'required': ErrorMessages.get_message(PurchaseErrorCodes.DELIVERY_PARTNER_REQUIRED),
            'invalid_choice': '–ò–∑–±—Ä–∞–Ω–∏—è—Ç –¥–æ—Å—Ç–∞–≤—á–∏–∫ –Ω–µ –µ –≤–∞–ª–∏–¥–µ–Ω'
        },
        widget=forms.Select(attrs={
            'class': 'kt-select',
            'data-kt-select': '{}',
            'id': 'partner_id'
        })
    )
    
    location_id = forms.ModelChoiceField(
        queryset=InventoryLocation.objects.filter(is_active=True),
        empty_label="–ò–∑–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...",
        error_messages={
            'required': ErrorMessages.get_message(PurchaseErrorCodes.DELIVERY_LOCATION_REQUIRED),
            'invalid_choice': '–ò–∑–±—Ä–∞–Ω–æ—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –µ –≤–∞–ª–∏–¥–Ω–æ'
        },
        widget=forms.Select(attrs={
            'class': 'kt-select',
            'data-kt-select': '{}',
            'id': 'location_id'
        })
    )
    
    document_date = forms.DateField(
        error_messages={'required': '–î–∞—Ç–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞'},
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date'
        })
    )
    
    delivery_date = forms.DateField(
        required=False,
        error_messages={'invalid': '–ù–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∞—Ç–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞'},
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date'
        })
    )
    
    supplier_delivery_reference = forms.CharField(
        required=False,
        max_length=100,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–†–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–∞ –¥–æ—Å—Ç–∞–≤—á–∏–∫–∞'
        })
    )
    
    notes = forms.CharField(
        required=False,
        max_length=500,
        widget=forms.Textarea(attrs={
            'class': 'form-control',
            'rows': 3,
            'placeholder': '–ë–µ–ª–µ–∂–∫–∏'
        })
    )

class DeliveryLineForm(forms.Form):
    """
    Enhanced —Ñ–æ—Ä–º–∞ –∑–∞ –µ–¥–∏–Ω —Ä–µ–¥ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
    
    –ù–æ–≤–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏:
    - Custom –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å structured error messages
    - Business rules validation
    - Enhanced error context –∑–∞ better UX
    """
    product = forms.ModelChoiceField(
        queryset=Product.objects.active(),
        error_messages={
            'required': ErrorMessages.get_message(PurchaseErrorCodes.DELIVERY_PRODUCT_REQUIRED),
            'invalid_choice': '–ò–∑–±—Ä–∞–Ω–∏—è—Ç –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –µ –≤–∞–ª–∏–¥–µ–Ω'
        },
        widget=forms.Select(attrs={
            'class': 'kt-select product-select w-full',
            'data-kt-select': '{}',
            'data-error-container': 'field'  # –ó–∞ JS error display
        })
    )
    quantity = forms.DecimalField(
        min_value=Decimal('0.001'),
        max_digits=10,
        decimal_places=3,
        error_messages={
            'required': ErrorMessages.get_message(PurchaseErrorCodes.DELIVERY_QUANTITY_INVALID),
            'min_value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ –ø–æ–Ω–µ 0.001',
            'invalid': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–æ —á–∏—Å–ª–æ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
            'max_digits': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ –µ —Ç–≤—ä—Ä–¥–µ –≥–æ–ª—è–º–æ',
            'max_decimal_places': '–ú–∞–∫—Å–∏–º—É–º 3 –¥–µ—Å–µ—Ç–∏—á–Ω–∏ –∑–Ω–∞–∫–∞ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        },
        widget=forms.NumberInput(attrs={
            'class': 'quantity-input w-20 text-right',
            'step': '0.001',
            'placeholder': '0',
            'min': '0.001',
            'data-error-container': 'field'
        })
    )
    unit_price = forms.DecimalField(
        min_value=Decimal('0'),
        max_digits=10,
        decimal_places=2,
        required=False,
        error_messages={
            'min_value': '–¶–µ–Ω–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∞',
            'invalid': '–í—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ —Ü–µ–Ω–∞',
            'max_digits': '–¶–µ–Ω–∞—Ç–∞ –µ —Ç–≤—ä—Ä–¥–µ –≤–∏—Å–æ–∫–∞',
            'max_decimal_places': '–ú–∞–∫—Å–∏–º—É–º 2 –¥–µ—Å–µ—Ç–∏—á–Ω–∏ –∑–Ω–∞–∫–∞ –∑–∞ —Ü–µ–Ω–∞'
        },
        widget=forms.NumberInput(attrs={
            'class': 'price-input w-24 text-right',
            'step': '0.01',
            'placeholder': 'Auto',
            'min': '0',
            'data-error-container': 'field'
        })
    )
    unit = forms.ModelChoiceField(
        queryset=UnitOfMeasure.objects.filter(is_active=True),
        required=False,
        error_messages={
            'invalid_choice': '–ò–∑–±—Ä–∞–Ω–∞—Ç–∞ –º–µ—Ä–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –µ –≤–∞–ª–∏–¥–Ω–∞'
        },
        widget=forms.Select(attrs={
            'class': 'kt-select unit-select w-20',
            'data-kt-select': '{}',
            'data-error-container': 'field'
        })
    )
    notes = forms.CharField(
        required=False,
        max_length=500,
        widget=forms.HiddenInput()
    )

    def clean(self):
        """
        üÜï Enhanced cross-field –≤–∞–ª–∏–¥–∞—Ü–∏—è with business rules
        """
        cleaned_data = super().clean()
        product = cleaned_data.get('product')
        quantity = cleaned_data.get('quantity')
        unit_price = cleaned_data.get('unit_price')
        unit = cleaned_data.get('unit')

        # Business rule validation
        errors = {}

        # 1. Product-related validation
        if product:
            # Check if product is purchasable
            if not getattr(product, 'is_purchasable', True):
                errors['product'] = '–¢–æ–∑–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –ø–æ—Ä—ä—á–≤–∞'

            # Check if product is active
            if not getattr(product, 'is_active', True):
                errors['product'] = '–¢–æ–∑–∏ –ø—Ä–æ–¥—É–∫—Ç –≤–µ—á–µ –Ω–µ –µ –∞–∫—Ç–∏–≤–µ–Ω'

        # 2. Quantity business rules
        if quantity:
            # Maximum reasonable quantity check (business rule)
            if quantity > Decimal('10000'):
                errors['quantity'] = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ –µ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –≥–æ–ª—è–º–æ (–º–∞–∫—Å–∏–º—É–º 10,000)'

            # Minimum meaningful quantity
            if quantity < Decimal('0.001'):
                errors['quantity'] = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ –µ —Ç–≤—ä—Ä–¥–µ –º–∞–ª–∫–æ'

        # 3. Price validation with product context
        if unit_price and product:
            # Price reasonableness check
            if unit_price > Decimal('100000'):
                errors['unit_price'] = '–¶–µ–Ω–∞—Ç–∞ –∏–∑–≥–ª–µ–∂–¥–∞ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –≤–∏—Å–æ–∫–∞'

            # Zero price warning (not error, but worth noting)
            if unit_price == Decimal('0'):
                # Add a context note but don't block
                cleaned_data['_price_warning'] = '–¶–µ–Ω–∞ 0.00 - –º–æ–ª—è –ø–æ—Ç–≤—ä—Ä–¥–µ—Ç–µ'

        # 4. Unit compatibility with product
        if unit and product and hasattr(product, 'base_unit'):
            # Check if selected unit is compatible with product
            if product.base_unit and unit != product.base_unit:
                # Verify unit is in product's packaging units
                compatible_units = []
                if hasattr(product, 'packagings'):
                    compatible_units = [p.unit.pk for p in product.packagings.all()]
                
                if product.base_unit.pk not in compatible_units:
                    compatible_units.append(product.base_unit.pk)
                
                if unit.pk not in compatible_units:
                    errors['unit'] = f'–ú–µ—Ä–Ω–∞—Ç–∞ –µ–¥–∏–Ω–∏—Ü–∞ –Ω–µ –µ —Å—ä–≤–º–µ—Å—Ç–∏–º–∞ —Å {product.name}'

        # 5. Calculate line total if both values present
        if quantity and unit_price:
            try:
                line_total = round_currency(quantity * unit_price)
                cleaned_data['_calculated_total'] = line_total
                
                # Warn if line total is very high
                if line_total > Decimal('50000'):
                    cleaned_data['_total_warning'] = '–û–±—â–∞—Ç–∞ —Å—É–º–∞ –∑–∞ —Ä–µ–¥–∞ –µ –º–Ω–æ–≥–æ –≤–∏—Å–æ–∫–∞'
                    
            except (ValueError, TypeError) as e:
                errors['__all__'] = '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –æ–±—â–∞—Ç–∞ —Å—É–º–∞ –∑–∞ —Ä–µ–¥–∞'

        # Raise validation errors if any
        if errors:
            # Create structured ValidationError for better handling
            raise ValidationError(errors)

        return cleaned_data

    def clean_quantity(self):
        """Additional quantity-specific validation"""
        quantity = self.cleaned_data.get('quantity')
        
        if quantity:
            # Round to 3 decimal places for consistency
            quantity = round(quantity, 3)
            
            # Business rule: reasonable quantity ranges per type
            if quantity > Decimal('9999.999'):
                raise ValidationError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ –ø—Ä–µ–≤–∏—à–∞–≤–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –ø–æ–∑–≤–æ–ª–µ–Ω–æ—Ç–æ (9999.999)')

        return quantity

    def clean_unit_price(self):
        """Additional price-specific validation"""
        unit_price = self.cleaned_data.get('unit_price')
        
        if unit_price is not None:
            # Round to currency precision
            unit_price = round_currency(unit_price)
            
            # Business validation for reasonable prices
            if unit_price > Decimal('99999.99'):
                raise ValidationError('–¶–µ–Ω–∞—Ç–∞ –ø—Ä–µ–≤–∏—à–∞–≤–∞ –º–∞–∫—Å–∏–º–∞–ª–Ω–æ –ø–æ–∑–≤–æ–ª–µ–Ω–∞—Ç–∞ (99,999.99)')

        return unit_price

    def has_warnings(self) -> bool:
        """Check if form has non-blocking warnings"""
        return any(key.startswith('_') and key.endswith('_warning') 
                  for key in self.cleaned_data)

    def get_warnings(self) -> dict:
        """Get all warning messages"""
        if not hasattr(self, 'cleaned_data'):
            return {}
        
        return {key.replace('_', '').replace('warning', ''): value 
                for key, value in self.cleaned_data.items() 
                if key.startswith('_') and key.endswith('_warning')}

    def get_calculated_total(self) -> Decimal:
        """Get calculated line total if available"""
        if hasattr(self, 'cleaned_data'):
            return self.cleaned_data.get('_calculated_total', Decimal('0'))
        return Decimal('0')

# "–§–∞–±—Ä–∏–∫–∞", –∫–æ—è—Ç–æ —Å—ä–∑–¥–∞–≤–∞ –∫–æ–ª–µ–∫—Ü–∏—è –æ—Ç DeliveryLineForm
DeliveryLineFormSet = formset_factory(
    DeliveryLineForm,
    extra=0,  # –ó–∞–ø–æ—á–≤–∞–º–µ —Å 0 —Ä–µ–¥–∞, JavaScript —â–µ –≥–∏ –¥–æ–±–∞–≤—è –¥–∏–Ω–∞–º–∏—á–Ω–æ
    can_delete=True # –ü–æ–∑–≤–æ–ª—è–≤–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (–ø–æ–ª–µ–∑–Ω–æ –∑–∞ edit —Ñ–æ—Ä–º–∞—Ç–∞)
)