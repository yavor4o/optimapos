# ===================================================================
# –ü–û–ü–†–ê–í–ö–ê –ù–ê STRING FORMATTING: purchases/admin/deliveries.py
# ===================================================================

from django.contrib import admin, messages
from django.core.exceptions import ValidationError
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from django.utils import timezone
from ..models import DeliveryReceipt, DeliveryLine


class DeliveryLineInline(admin.TabularInline):
    model = DeliveryLine
    extra = 1
    fields = (
        'line_number',
        'product',
        'quantity',  # ‚úÖ FIXED: –±–µ—à–µ 'received_quantity'
        'unit',
        'unit_price',
        'get_expected_quantity',
        'get_variance_quantity',
        'get_source_info',  # ‚úÖ DEBUG INFO
        'batch_number',
        'expiry_date',
        'quality_approved',
        'quality_issue_type'
    )

    readonly_fields = (
        'get_expected_quantity',
        'get_variance_quantity',
        'get_source_info'  # ‚úÖ DEBUG INFO
    )

    @admin.display(description='Expected')
    def get_expected_quantity(self, obj):
        """Expected quantity from source order line - FIXED FORMATTING"""
        if not obj:
            return "No obj"

        if not obj.pk:
            return "Not saved"

        try:
            if obj.source_order_line:
                expected = obj.source_order_line.ordered_quantity
                return "{:.3f}".format(expected)  # ‚úÖ FIXED: —Å—Ç–∞—Ä–æ formatting
            else:
                return "No source"
        except Exception as e:
            return "Error: {}".format(str(e)[:20])  # ‚úÖ FIXED

    @admin.display(description='Variance')
    def get_variance_quantity(self, obj):
        """Variance calculation - FIXED FORMATTING"""
        if not obj or not obj.pk:
            return "Not saved"

        try:
            if not obj.source_order_line:
                return "No source"

            if not obj.quantity:
                return "No quantity"

            expected = obj.source_order_line.ordered_quantity or 0
            received = obj.quantity or 0
            variance = received - expected

            # Color coding - FIXED FORMATTING
            if variance > 0:
                return format_html(
                    '<span style="color: green; font-weight: bold;">+{}</span>',
                    "{:.3f}".format(variance)  # ‚úÖ FIXED
                )
            elif variance < 0:
                return format_html(
                    '<span style="color: red; font-weight: bold;">{}</span>',
                    "{:.3f}".format(variance)  # ‚úÖ FIXED
                )
            else:
                return format_html(
                    '<span style="color: black;">0.000</span>'
                )

        except Exception as e:
            return "Error: {}".format(str(e)[:20])  # ‚úÖ FIXED

    @admin.display(description='Source Info')
    def get_source_info(self, obj):
        """Debug info –∑–∞ source order line –≤—Ä—ä–∑–∫–∞—Ç–∞ - FIXED FORMATTING"""
        if not obj or not obj.pk:
            return "Not saved"

        try:
            if obj.source_order_line:
                return format_html(
                    '<small>Order: {}<br>Line: {}<br>Qty: {}</small>',
                    obj.source_order_line.document.document_number[:15],
                    obj.source_order_line.line_number,
                    "{:.3f}".format(obj.source_order_line.ordered_quantity)  # ‚úÖ FIXED
                )
            else:
                return format_html('<small style="color: red;">No source link</small>')
        except Exception as e:
            return format_html('<small style="color: red;">Error: {}</small>', str(e)[:30])


@admin.register(DeliveryReceipt)
class DeliveryReceiptAdmin(admin.ModelAdmin):
    list_display = (
        'document_number', 'supplier', 'delivery_date', 'status',
        'get_source_order_info', 'total'
    )
    list_filter = ('status', 'quality_status', 'supplier', 'location', 'delivery_date')
    search_fields = ('document_number', 'supplier__name', 'supplier_delivery_reference')
    readonly_fields = (
        'document_number', 'status', 'created_by', 'created_at',
        'updated_by', 'updated_at', 'source_order', 'quality_checked_by', 'quality_checked_at'
    )

    inlines = [DeliveryLineInline]
    actions = [
        'process_quality_control_action',
        'create_movements_action',
        'debug_source_links_action'
    ]

    @admin.display(description='Source Order')
    def get_source_order_info(self, obj):
        """Show source order info - FIXED FORMATTING"""
        if obj.source_order:
            return format_html(
                '<a href="/admin/purchases/purchaseorder/{}/change/" target="_blank">{}</a>',
                obj.source_order.pk,
                obj.source_order.document_number
            )
        return format_html('<span style="color: red;">No source</span>')

    def save_model(self, request, obj, form, change):
        if not obj.pk:
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)

    def save_formset(self, request, form, formset, change):
        instances = formset.save()
        if instances and hasattr(instances[0].document, 'recalculate_totals'):
            document = instances[0].document
            document.recalculate_totals()
        super().save_formset(request, form, formset, change)

    # --- ADMIN ACTIONS ---
    @admin.action(description='üîç Debug Source Links')
    def debug_source_links_action(self, request, queryset):
        """Debug action –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ source links"""
        for delivery in queryset:
            lines_info = []
            for line in delivery.lines.all():
                source_info = "No source"
                if line.source_order_line:
                    source_info = "Order: {}, Line: {}".format(
                        line.source_order_line.document.document_number,
                        line.source_order_line.line_number
                    )

                lines_info.append("Line {}: {}".format(line.line_number, source_info))

            message = "üìã {}:\n{}".format(delivery.document_number, "\n".join(lines_info))
            self.message_user(request, message, messages.INFO)

    @admin.action(description='‚úÖ Process Quality Control (Approve All)')
    def process_quality_control_action(self, request, queryset):
        for delivery in queryset:
            try:
                lines_updated = 0
                for line in delivery.lines.all():
                    if line.quality_approved is None:
                        line.quality_approved = True
                        line.quality_checked_by = request.user
                        line.quality_checked_at = timezone.now()
                        line.save()
                        lines_updated += 1

                delivery.quality_status = 'approved'
                delivery.quality_checked_by = request.user
                delivery.quality_checked_at = timezone.now()
                delivery.save()

                self.message_user(
                    request,
                    "‚úÖ Approved {} lines in {}".format(lines_updated, delivery.document_number),
                    messages.SUCCESS
                )
            except Exception as e:
                self.message_user(
                    request,
                    "‚ùå Error processing {}: {}".format(delivery.document_number, e),
                    messages.ERROR
                )

    @admin.action(description='üì¶ Create Inventory Movements')
    def create_movements_action(self, request, queryset):
        for delivery in queryset:
            try:
                self.message_user(
                    request,
                    "üì¶ Would create movements for {}".format(delivery.document_number),
                    messages.INFO
                )
            except Exception as e:
                self.message_user(
                    request,
                    "‚ùå Error: {}".format(e),
                    messages.ERROR
                )


# ===================================================================
# –ê–õ–¢–ï–†–ù–ê–¢–ò–í–ê: –ü–æ-–æ–ø—Ä–æ—Å—Ç–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –±–µ–∑ debug info
# ===================================================================

class SimpleDeliveryLineInline(admin.TabularInline):
    """–û–ø—Ä–æ—Å—Ç–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –±–µ–∑ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    model = DeliveryLine
    extra = 1
    fields = (
        'line_number',
        'product',
        'quantity',  # ‚úÖ FIXED field name
        'unit',
        'unit_price',
        'get_line_total',  # –ü–æ–∫–∞–∑–≤–∞–π line total –≤–º–µ—Å—Ç–æ variance
        'batch_number',
        'expiry_date',
        'quality_approved',
        'quality_issue_type'
    )

    readonly_fields = ('get_line_total',)

    @admin.display(description='Line Total')
    def get_line_total(self, obj):
        """Simple line total calculation"""
        if obj and obj.quantity and obj.unit_price:
            total = obj.quantity * obj.unit_price
            return "{:.2f}".format(total)  # ‚úÖ Safe formatting
        return "0.00"


# ===================================================================
# DJANGO VERSION COMPATIBILITY
# ===================================================================

"""
–ü—Ä–æ–±–ª–µ–º—ä—Ç —Å f-string –º–æ–∂–µ –¥–∞ –µ –æ—Ç:
1. –°—Ç–∞—Ä–∞ –≤–µ—Ä—Å–∏—è –Ω–∞ Python (< 3.6)
2. –ì—Ä–µ—à–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ format_html()

–†–ï–®–ï–ù–ò–ï–¢–û:
–ò–∑–ø–æ–ª–∑–≤–∞–π .format() –≤–º–µ—Å—Ç–æ f-strings –≤ admin –º–µ—Ç–æ–¥–∏:

–í–ú–ï–°–¢–û:
    return f"{value:.3f}"

–ò–ó–ü–û–õ–ó–í–ê–ô:
    return "{:.3f}".format(value)

–í–ú–ï–°–¢–û:
    return f"Error: {str(e)}"

–ò–ó–ü–û–õ–ó–í–ê–ô:
    return "Error: {}".format(str(e))
"""

# ===================================================================
# –¢–ï–°–¢ –ù–ê –ü–û–ü–†–ê–í–ö–ê–¢–ê
# ===================================================================

"""
–°–ª–µ–¥ —Ç–∞–∑–∏ –ø–æ–ø—Ä–∞–≤–∫–∞:

1. "Unknown format code 'f'" –≥—Ä–µ—à–∫–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –∏–∑—á–µ–∑–Ω–µ
2. Expected –∫–æ–ª–æ–Ω–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –ø–æ–∫–∞–∑–≤–∞ —á–∏—Å–ª–∞ –∏–ª–∏ "No source"
3. Variance –∫–æ–ª–æ–Ω–∞—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ –ø–æ–∫–∞–∑–≤–∞ —Ü–≤–µ—Ç–Ω–∏ —Ä–∞–∑–ª–∏–∫–∏ –∏–ª–∏ "No source"

–ê–∫–æ –≤—Å–µ –æ—â–µ –∏–º–∞ –ø—Ä–æ–±–ª–µ–º–∏:
1. –ò–∑–ø–æ–ª–∑–≤–∞–π SimpleDeliveryLineInline –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–∞—Ç–∞ –≤–µ—Ä—Å–∏—è
2. –ü—Ä–æ–≤–µ—Ä–∏ Python –≤–µ—Ä—Å–∏—è—Ç–∞: python --version
3. –ü—Ä–æ–≤–µ—Ä–∏ Django –≤–µ—Ä—Å–∏—è—Ç–∞: python manage.py --version
"""