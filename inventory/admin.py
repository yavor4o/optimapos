# inventory/admin.py - –ü–™–õ–ï–ù –ü–†–û–§–ï–°–ò–û–ù–ê–õ–ï–ù –ê–î–ú–ò–ù –ó–ê –í–°–ò–ß–ö–ò –ú–û–î–ï–õ–ò

from django.contrib import admin
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from django.utils.safestring import mark_safe
from django.db import models
from django.db.models import Count, Sum, Q, F
from django.utils import timezone
from django.urls import reverse
from django.shortcuts import redirect
from django.contrib import messages

from .models import (
    InventoryLocation,
    InventoryItem,
    InventoryBatch,
    InventoryMovement
)


# =================================================================
# INLINE ADMINS
# =================================================================

class InventoryItemInline(admin.TabularInline):
    """Inline –∑–∞ inventory items –≤ location admin"""
    model = InventoryItem
    extra = 0
    fields = [
        'product', 'current_qty', 'reserved_qty', 'avg_cost',
        'min_stock_level', 'max_stock_level', 'last_movement_date'
    ]
    readonly_fields = ['current_qty', 'reserved_qty', 'avg_cost', 'last_movement_date']

    def has_add_permission(self, request, obj):
        return False


class InventoryBatchInline(admin.TabularInline):
    """Inline –∑–∞ batch-–æ–≤–µ –≤ product admin (–Ω–µ –≤ InventoryItem)"""
    model = InventoryBatch
    extra = 0
    fields = [
        'location', 'batch_number', 'remaining_qty', 'cost_price', 'expiry_date',
        'received_date', 'is_unknown_batch'
    ]
    readonly_fields = ['received_qty', 'is_unknown_batch']


class InventoryMovementInline(admin.TabularInline):
    """Inline –∑–∞ movements (—â–µ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –≤ product –∏–ª–∏ location admin)"""
    model = InventoryMovement
    extra = 0
    fields = [
        'movement_type', 'quantity', 'cost_price', 'batch_number',
        'movement_date', 'created_at'
    ]
    readonly_fields = ['movement_type', 'quantity', 'cost_price', 'batch_number', 'movement_date', 'created_at']
    ordering = ['-created_at']

    def has_add_permission(self, request, obj):
        return False

    def has_delete_permission(self, request, obj=None):
        return False


# =================================================================
# INVENTORY LOCATION ADMIN
# =================================================================

@admin.register(InventoryLocation)
class InventoryLocationAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –∑–∞ —Å–∫–ª–∞–¥–æ–≤–∏ –ª–æ–∫–∞—Ü–∏–∏"""

    list_display = [
        'code', 'name', 'location_type', 'batch_tracking_mode',
        'allow_negative_stock', 'items_count', 'total_stock_value',
        'is_active'
    ]

    list_filter = [
        'location_type', 'batch_tracking_mode', 'allow_negative_stock',
        'is_active'
    ]

    search_fields = ['code', 'name', 'description']

    list_editable = ['is_active']

    ordering = ['code']

    readonly_fields = [
        'created_at', 'updated_at', 'location_statistics',
        'batch_tracking_info', 'stock_summary'
    ]

    inlines = [InventoryItemInline]

    fieldsets = (
        (_('Basic Information'), {
            'fields': (
                'code', 'name', 'location_type', 'description',
                'is_active'
            )
        }),
        (_('Batch Tracking Settings'), {
            'fields': (
                'batch_tracking_mode', 'batch_expiry_tracking',
                'batch_tracking_info'
            ),
            'classes': ('collapse',)
        }),
        (_('Stock Management'), {
            'fields': (
                'allow_negative_stock', 'enable_cycle_counting',
                'auto_reorder_enabled'
            )
        }),
        (_('Contact Information'), {
            'fields': (
                'address', 'phone', 'email', 'manager'
            ),
            'classes': ('collapse',)
        }),
        (_('Pricing Settings'), {
            'fields': (
                'default_markup_percentage', 'purchase_prices_include_vat',
                'sales_prices_include_vat'
            ),
            'classes': ('collapse',)
        }),
        (_('System Information'), {
            'fields': (
                'created_at', 'updated_at', 'location_statistics',
                'stock_summary'
            ),
            'classes': ('collapse',)
        })
    )

    def items_count(self, obj):
        """–ë—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞ –ª–æ–∫–∞—Ü–∏—è—Ç–∞"""
        count = obj.inventory_items.count()
        if count == 0:
            return mark_safe('<span style="color: gray;">0</span>')

        url = reverse('admin:inventory_inventoryitem_changelist')
        return mark_safe(
            '<a href="{}?location__id__exact={}">{} products</a>'.format(url, obj.id, count)
        )

    items_count.short_description = _('Products')

    def total_stock_value(self, obj):
        """–û–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ —Å–∫–ª–∞–¥–∞"""
        total = obj.inventory_items.aggregate(
            total=Sum('current_qty') * Sum('avg_cost')
        )['total'] or 0

        if total == 0:
            return mark_safe('<span style="color: gray;">0.00 –ª–≤</span>')

        return mark_safe(
            '<span style="font-weight: bold; color: green;">{:.2f} –ª–≤</span>'.format(total)
        )

    total_stock_value.short_description = _('Stock Value')

    def location_statistics(self, obj):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ª–æ–∫–∞—Ü–∏—è—Ç–∞"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        stats = {
            'items_count': obj.inventory_items.count(),
            'with_stock': obj.inventory_items.filter(current_qty__gt=0).count(),
            'low_stock': obj.inventory_items.filter(
                current_qty__lte=models.F('min_stock_level'),
                min_stock_level__gt=0,
                current_qty__gt=0
            ).count(),
            'negative_stock': obj.inventory_items.filter(current_qty__lt=0).count(),
            'batches_count': obj.inventory_batches.count() if hasattr(obj, 'inventory_batches') else 0,
            'expired_batches': obj.inventory_batches.filter(
                expiry_date__lt=timezone.now().date(),
                remaining_qty__gt=0
            ).count() if hasattr(obj, 'inventory_batches') else 0
        }

        html_parts = ['<div style="font-family: monospace;">']
        html_parts.append('üì¶ –û–±—â–æ –ø—Ä–æ–¥—É–∫—Ç–∏: <strong>{}</strong><br>'.format(stats["items_count"]))
        html_parts.append('‚úÖ –° –Ω–∞–ª–∏—á–Ω–æ—Å—Ç: <strong>{}</strong><br>'.format(stats["with_stock"]))

        if stats['low_stock'] > 0:
            html_parts.append(
                '‚ö†Ô∏è –ù–∏—Å–∫–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç: <strong style="color: orange;">{}</strong><br>'.format(stats["low_stock"]))

        if stats['negative_stock'] > 0:
            html_parts.append(
                '‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç: <strong style="color: red;">{}</strong><br>'.format(stats["negative_stock"]))

        if stats['batches_count'] > 0:
            html_parts.append('üìã –ü–∞—Ä—Ç–∏–¥–∏: <strong>{}</strong><br>'.format(stats["batches_count"]))

        if stats['expired_batches'] > 0:
            html_parts.append(
                '‚è∞ –ò–∑—Ç–µ–∫–ª–∏ –ø–∞—Ä—Ç–∏–¥–∏: <strong style="color: red;">{}</strong><br>'.format(stats["expired_batches"]))

        html_parts.append('</div>')
        return mark_safe(''.join(html_parts))

    location_statistics.short_description = _('Statistics')

    def batch_tracking_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ batch tracking"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        mode_colors = {
            'DISABLED': 'gray',
            'OPTIONAL': 'blue',
            'ENFORCED': 'green'
        }

        color = mode_colors.get(obj.batch_tracking_mode, 'black')
        mode_text = obj.get_batch_tracking_mode_display()

        html_parts = []
        html_parts.append('<span style="color: {}; font-weight: bold;">{}</span><br>'.format(color, mode_text))

        if obj.batch_expiry_tracking:
            html_parts.append('<span style="color: green;">‚úì –ü—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–æ–∫–∞</span><br>')
        else:
            html_parts.append('<span style="color: orange;">‚ö† –ë–µ–∑ –ø—Ä–æ—Å–ª–µ–¥—è–≤–∞–Ω–µ –Ω–∞ —Å—Ä–æ–∫–∞</span><br>')

        return mark_safe(''.join(html_parts))

    batch_tracking_info.short_description = _('Batch Tracking')

    def stock_summary(self, obj):
        """–û–±–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–∞"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        from django.db.models import Sum, Count

        summary = obj.inventory_items.aggregate(
            total_products=Count('id'),
            total_qty=Sum('current_qty'),
            total_reserved=Sum('reserved_qty'),
            total_value=Sum(models.F('current_qty') * models.F('avg_cost'))
        )

        html_parts = []
        html_parts.append(
            '<div style="font-family: monospace; background: #f8f9fa; padding: 10px; border-radius: 5px;">')
        html_parts.append('üìä <strong>–û–±–æ–±—â–µ–Ω–∏–µ —Å–∫–ª–∞–¥ {}</strong><br><br>'.format(obj.code))
        html_parts.append('–ü—Ä–æ–¥—É–∫—Ç–∏: <strong>{}</strong><br>'.format(summary["total_products"] or 0))
        html_parts.append('–û–±—â–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{:.3f}</strong><br>'.format(summary["total_qty"] or 0))
        html_parts.append('–†–µ–∑–µ—Ä–≤–∏—Ä–∞–Ω–æ: <strong>{:.3f}</strong><br>'.format(summary["total_reserved"] or 0))
        html_parts.append('–ù–∞–ª–∏—á–Ω–æ: <strong>{:.3f}</strong><br>'.format(
            (summary["total_qty"] or 0) - (summary["total_reserved"] or 0)))
        html_parts.append('–°—Ç–æ–π–Ω–æ—Å—Ç: <strong>{:.2f} –ª–≤</strong>'.format(summary["total_value"] or 0))
        html_parts.append('</div>')

        return mark_safe(''.join(html_parts))

    stock_summary.short_description = _('Stock Summary')


# =================================================================
# INVENTORY ITEM ADMIN
# =================================================================

@admin.register(InventoryItem)
class InventoryItemAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –∑–∞ inventory items (–∫–µ—à–∏—Ä–∞–Ω–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)"""

    list_display = [
        'product_info', 'location', 'stock_status', 'quantities_display',
        'cost_info', 'stock_levels', 'last_movement_date'
    ]

    list_filter = [
        'location', 'location__location_type',
        ('last_movement_date', admin.DateFieldListFilter),
        ('product__product_type', admin.RelatedOnlyFieldListFilter),
    ]

    search_fields = [
        'product__code', 'product__name', 'product__barcode',
        'location__code', 'location__name'
    ]

    readonly_fields = [
        'current_qty', 'reserved_qty', 'avg_cost', 'last_movement_date',
        'updated_at', 'availability_info', 'cost_analysis', 'movement_history'
    ]

    ordering = ['location', 'product']

    # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ inline-–æ–≤–µ—Ç–µ –∑–∞—â–æ—Ç–æ –Ω—è–º–∞—Ç –ø—Ä–∞–≤–∏–ª–Ω–∞ FK –≤—Ä—ä–∑–∫–∞
    # inlines = [InventoryBatchInline, InventoryMovementInline]

    fieldsets = (
        (_('Product & Location'), {
            'fields': ('product', 'location')
        }),
        (_('Current Stock'), {
            'fields': (
                'current_qty', 'reserved_qty', 'availability_info'
            )
        }),
        (_('Cost Information'), {
            'fields': (
                'avg_cost', 'last_purchase_cost', 'last_purchase_date',
                'last_sale_price', 'last_sale_date', 'cost_analysis'
            ),
            'classes': ('collapse',)
        }),
        (_('Stock Management'), {
            'fields': ('min_stock_level', 'max_stock_level')
        }),
        (_('System Information'), {
            'fields': (
                'last_movement_date', 'updated_at', 'movement_history'
            ),
            'classes': ('collapse',)
        })
    )

    def product_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        html_parts = []
        html_parts.append('<strong>{}</strong><br>'.format(obj.product.code))
        html_parts.append('<span style="font-size: 0.9em;">{}</span>'.format(obj.product.name[:50]))

        if hasattr(obj.product, 'barcode') and obj.product.barcode:
            html_parts.append(
                '<br><span style="font-size: 0.8em; color: gray;">üè∑Ô∏è {}</span>'.format(obj.product.barcode))

        return mark_safe(''.join(html_parts))

    product_info.short_description = _('Product')

    def stock_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–∫–ª–∞–¥–∞"""
        if obj.current_qty <= 0:
            if obj.current_qty < 0:
                return mark_safe(
                    '<span style="background: #ffebee; color: #c62828; padding: 2px 6px; border-radius: 3px;">'
                    '‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–∞'
                    '</span>'
                )
            else:
                return mark_safe(
                    '<span style="background: #fafafa; color: #616161; padding: 2px 6px; border-radius: 3px;">'
                    '‚ö™ –ù—è–º–∞'
                    '</span>'
                )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –Ω–∏—Å–∫–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç
        if obj.min_stock_level > 0 and obj.current_qty <= obj.min_stock_level:
            return mark_safe(
                '<span style="background: #fff3e0; color: #ef6c00; padding: 2px 6px; border-radius: 3px;">'
                '‚ö†Ô∏è –ù–∏—Å–∫–∞'
                '</span>'
            )

        return mark_safe(
            '<span style="background: #e8f5e8; color: #2e7d32; padding: 2px 6px; border-radius: 3px;">'
            '‚úÖ –ù–∞–ª–∏—á–Ω–∞'
            '</span>'
        )

    stock_status.short_description = _('Status')

    def quantities_display(self, obj):
        """–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ç–∞"""
        available = obj.current_qty - obj.reserved_qty

        html_parts = []
        html_parts.append('<div style="font-family: monospace;">')
        html_parts.append('üì¶ <strong>{:.3f}</strong><br>'.format(obj.current_qty))

        if obj.reserved_qty > 0:
            html_parts.append('üîí <span style="color: orange;">{:.3f}</span><br>'.format(obj.reserved_qty))
            html_parts.append('‚úÖ <strong style="color: green;">{:.3f}</strong>'.format(available))
        else:
            html_parts.append('‚úÖ <strong style="color: green;">{:.3f}</strong>'.format(available))

        html_parts.append('</div>')

        return mark_safe(''.join(html_parts))

    quantities_display.short_description = _('Qty (Current/Reserved/Available)')

    def cost_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ —Ü–µ–Ω–∏"""
        if obj.avg_cost == 0:
            return mark_safe('<span style="color: gray;">–ù—è–º–∞ –¥–∞–Ω–Ω–∏</span>')

        html_parts = []
        html_parts.append('<div style="font-family: monospace;">')
        html_parts.append('üí∞ <strong>{:.4f} –ª–≤</strong><br>'.format(obj.avg_cost))

        if obj.last_purchase_cost:
            html_parts.append('üìà {:.4f} –ª–≤'.format(obj.last_purchase_cost))
            if obj.last_purchase_date:
                html_parts.append(
                    '<br><span style="font-size: 0.8em; color: gray;">({})</span>'.format(obj.last_purchase_date))

        html_parts.append('</div>')
        return mark_safe(''.join(html_parts))

    cost_info.short_description = _('Cost (Avg/Last Purchase)')

    def stock_levels(self, obj):
        """–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ª–∏–º–∏—Ç–∏—Ç–µ"""
        html_parts = ['<div style="font-family: monospace; font-size: 0.9em;">']

        if obj.min_stock_level > 0:
            html_parts.append('‚¨áÔ∏è {:.3f}'.format(obj.min_stock_level))
        else:
            html_parts.append('‚¨áÔ∏è -')

        html_parts.append(' | ')

        if obj.max_stock_level > 0:
            html_parts.append('‚¨ÜÔ∏è {:.3f}'.format(obj.max_stock_level))
        else:
            html_parts.append('‚¨ÜÔ∏è -')

        html_parts.append('</div>')
        return mark_safe(''.join(html_parts))

    stock_levels.short_description = _('Min | Max')

    def availability_info(self, obj):
        """–ü–æ–¥—Ä–æ–±–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        available = obj.current_qty - obj.reserved_qty

        html = '<div style="background: #f8f9fa; padding: 10px; border-radius: 5px;">'
        html += f'üìä <strong>–î–µ—Ç–∞–π–ª–∏ –∑–∞ –Ω–∞–ª–∏—á–Ω–æ—Å—Ç—Ç–∞</strong><br><br>'
        html += f'–û–±—â–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{obj.current_qty:.3f}</strong><br>'
        html += f'–†–µ–∑–µ—Ä–≤–∏—Ä–∞–Ω–æ: <strong>{obj.reserved_qty:.3f}</strong><br>'
        html += f'–ù–∞–ª–∏—á–Ω–æ –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞: <strong style="color: green;">{available:.3f}</strong><br><br>'

        # –°—Ç–∞—Ç—É—Å —Å–ø—Ä—è–º–æ –ª–∏–º–∏—Ç–∏—Ç–µ
        if obj.min_stock_level > 0:
            html += f'–ú–∏–Ω–∏–º—É–º: <strong>{obj.min_stock_level:.3f}</strong>'
            if obj.current_qty <= obj.min_stock_level:
                html += ' <span style="color: red;">‚ö†Ô∏è –ü–æ–¥ –ª–∏–º–∏—Ç–∞!</span>'
            html += '<br>'

        if obj.max_stock_level > 0:
            html += f'–ú–∞–∫—Å–∏–º—É–º: <strong>{obj.max_stock_level:.3f}</strong>'
            if obj.current_qty >= obj.max_stock_level:
                html += ' <span style="color: orange;">‚ö†Ô∏è –ù–∞–¥ –ª–∏–º–∏—Ç–∞!</span>'
            html += '<br>'

        html += '</div>'
        return mark_safe(html)

    availability_info.short_description = _('Availability Details')

    def cost_analysis(self, obj):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        html_parts = []
        html_parts.append('<div style="background: #f8f9fa; padding: 10px; border-radius: 5px;">')
        html_parts.append('üí∞ <strong>–ê–Ω–∞–ª–∏–∑ –Ω–∞ —Ä–∞–∑—Ö–æ–¥–∏—Ç–µ</strong><br><br>')

        if obj.avg_cost > 0:
            stock_value = obj.current_qty * obj.avg_cost
            html_parts.append('–°—Ä–µ–¥–Ω–∞ —Ü–µ–Ω–∞: <strong>{:.4f} –ª–≤</strong><br>'.format(obj.avg_cost))
            html_parts.append('–°—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ —Å–∫–ª–∞–¥–∞: <strong>{:.2f} –ª–≤</strong><br><br>'.format(stock_value))

        if obj.last_purchase_cost:
            html_parts.append('–ü–æ—Å–ª–µ–¥–Ω–∞ –ø–æ–∫—É–ø–Ω–∞ —Ü–µ–Ω–∞: <strong>{:.4f} –ª–≤</strong><br>'.format(obj.last_purchase_cost))
            if obj.last_purchase_date:
                html_parts.append('–î–∞—Ç–∞: {}<br>'.format(obj.last_purchase_date))

            if obj.avg_cost > 0:
                diff = obj.last_purchase_cost - obj.avg_cost
                diff_pct = (diff / obj.avg_cost) * 100
                if diff > 0:
                    html_parts.append(
                        '<span style="color: red;">üìà +{:.4f} –ª–≤ ({:+.1f}%)</span><br>'.format(diff, diff_pct))
                elif diff < 0:
                    html_parts.append(
                        '<span style="color: green;">üìâ {:.4f} –ª–≤ ({:+.1f}%)</span><br>'.format(diff, diff_pct))
            html_parts.append('<br>')

        if obj.last_sale_price:
            html_parts.append('–ü–æ—Å–ª–µ–¥–Ω–∞ –ø—Ä–æ–¥–∞–∂–Ω–∞ —Ü–µ–Ω–∞: <strong>{:.2f} –ª–≤</strong><br>'.format(obj.last_sale_price))
            if obj.last_sale_date:
                html_parts.append('–î–∞—Ç–∞: {}<br>'.format(obj.last_sale_date))

            if obj.avg_cost > 0:
                margin = obj.last_sale_price - obj.avg_cost
                margin_pct = (margin / obj.last_sale_price) * 100
                html_parts.append(
                    '–ú–∞—Ä–∂: <strong style="color: blue;">{:.2f} –ª–≤ ({:.1f}%)</strong>'.format(margin, margin_pct))

        html_parts.append('</div>')
        return mark_safe(''.join(html_parts))

    cost_analysis.short_description = _('Cost Analysis')

    def movement_history(self, obj):
        """–ò—Å—Ç–æ—Ä–∏—è –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è—Ç–∞"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        movements = obj.product.inventory_movements.filter(
            location=obj.location
        ).order_by('-created_at')[:5]

        if not movements:
            return '–ù—è–º–∞ –¥–≤–∏–∂–µ–Ω–∏—è'

        html_parts = []
        html_parts.append('<div style="font-family: monospace; font-size: 0.9em;">')
        html_parts.append('<strong>–ü–æ—Å–ª–µ–¥–Ω–∏ 5 –¥–≤–∏–∂–µ–Ω–∏—è:</strong><br><br>')

        for movement in movements:
            direction = "‚û°Ô∏è" if movement.is_incoming else "‚¨ÖÔ∏è"
            date_str = movement.movement_date.strftime('%d.%m.%y')

            html_parts.append(
                '{} {:.3f} - {}'.format(direction, movement.quantity, movement.get_movement_type_display()))
            html_parts.append(' <span style="color: gray;">({})</span><br>'.format(date_str))

        html_parts.append('<br>')
        url = reverse('admin:inventory_inventorymovement_changelist')
        html_parts.append(
            '<a href="{}?location__id__exact={}&product__id__exact={}">–í–∏–∂ –≤—Å–∏—á–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è</a>'.format(url,
                                                                                                       obj.location.id,
                                                                                                       obj.product.id))
        html_parts.append('</div>')

        return mark_safe(''.join(html_parts))

    movement_history.short_description = _('Recent Movements')


# =================================================================
# INVENTORY BATCH ADMIN
# =================================================================

@admin.register(InventoryBatch)
class InventoryBatchAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –∑–∞ inventory batch-–æ–≤–µ"""

    list_display = [
        'batch_info', 'location', 'product', 'quantities_display',
        'cost_price', 'expiry_status', 'received_date'
    ]

    list_filter = [
        'location', 'is_unknown_batch',
        ('expiry_date', admin.DateFieldListFilter),
        ('received_date', admin.DateFieldListFilter),
    ]

    search_fields = [
        'batch_number', 'product__code', 'product__name',
        'location__code', 'original_source'
    ]

    readonly_fields = [
        'created_at', 'updated_at', 'batch_analytics',
        'conversion_info', 'consumption_rate'
    ]

    ordering = ['-received_date', 'expiry_date']

    fieldsets = (
        (_('Batch Information'), {
            'fields': (
                'batch_number', 'location', 'product', 'is_unknown_batch',
                'original_source'
            )
        }),
        (_('Quantities'), {
            'fields': ('received_qty', 'remaining_qty')
        }),
        (_('Dates'), {
            'fields': ('received_date', 'expiry_date', 'conversion_date')
        }),
        (_('Cost'), {
            'fields': ('cost_price',)
        }),
        (_('Analytics'), {
            'fields': ('batch_analytics', 'conversion_info', 'consumption_rate'),
            'classes': ('collapse',)
        }),
        (_('System'), {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        })
    )

    def batch_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–∞—Ä—Ç–∏–¥–∞—Ç–∞"""
        html_parts = ['<strong>{}</strong><br>'.format(obj.batch_number)]

        if obj.is_unknown_batch:
            html_parts.append(
                '<span style="background: #fff3e0; color: #ef6c00; padding: 1px 4px; border-radius: 2px; font-size: 0.8em;">UNKNOWN</span>')

        return mark_safe(''.join(html_parts))

    batch_info.short_description = _('Batch')

    def quantities_display(self, obj):
        """–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ç–∞"""
        consumed = obj.received_qty - obj.remaining_qty
        consumption_pct = (consumed / obj.received_qty * 100) if obj.received_qty > 0 else 0

        html_parts = []
        html_parts.append('<div style="font-family: monospace; font-size: 0.9em;">')
        html_parts.append('üì¶ –ü–æ–ª—É—á–µ–Ω–æ: <strong>{:.3f}</strong><br>'.format(obj.received_qty))
        html_parts.append('‚úÖ –ù–∞–ª–∏—á–Ω–æ: <strong style="color: green;">{:.3f}</strong><br>'.format(obj.remaining_qty))
        html_parts.append('üì§ –ò–∑–ø–æ–ª–∑–≤–∞–Ω–æ: {:.3f} ({:.1f}%)'.format(consumed, consumption_pct))
        html_parts.append('</div>')

        return mark_safe(''.join(html_parts))

    quantities_display.short_description = _('Received/Remaining/Used')

    def expiry_status(self, obj):
        """–°—Ç–∞—Ç—É—Å –Ω–∞ —Å—Ä–æ–∫–∞ –Ω–∞ –≥–æ–¥–Ω–æ—Å—Ç"""
        if not obj.expiry_date:
            return mark_safe('<span style="color: gray;">–ù—è–º–∞ —Å—Ä–æ–∫</span>')

        today = timezone.now().date()
        days_to_expiry = (obj.expiry_date - today).days

        if days_to_expiry < 0:
            return mark_safe(
                '<span style="background: #ffebee; color: #c62828; padding: 2px 6px; border-radius: 3px;">'
                '‚ùå –ò–∑—Ç–µ–∫—ä–ª (-{} –¥–Ω–∏)'
                '</span>'.format(abs(days_to_expiry))
            )
        elif days_to_expiry <= 7:
            return mark_safe(
                '<span style="background: #fff3e0; color: #ef6c00; padding: 2px 6px; border-radius: 3px;">'
                '‚ö†Ô∏è {} –¥–Ω–∏'
                '</span>'.format(days_to_expiry)
            )
        elif days_to_expiry <= 30:
            return mark_safe(
                '<span style="background: #fff8e1; color: #f57c00; padding: 2px 6px; border-radius: 3px;">'
                'üìÖ {} –¥–Ω–∏'
                '</span>'.format(days_to_expiry)
            )
        else:
            return mark_safe(
                '<span style="background: #e8f5e8; color: #2e7d32; padding: 2px 6px; border-radius: 3px;">'
                '‚úÖ {} –¥–Ω–∏'
                '</span>'.format(days_to_expiry)
            )

    expiry_status.short_description = _('Expiry Status')

    def batch_analytics(self, obj):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–∞—Ä—Ç–∏–¥–∞—Ç–∞"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        consumed = obj.received_qty - obj.remaining_qty
        consumption_pct = (consumed / obj.received_qty * 100) if obj.received_qty > 0 else 0

        html_parts = []
        html_parts.append('<div style="background: #f8f9fa; padding: 10px; border-radius: 5px;">')
        html_parts.append('üìä <strong>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–¥–∞ {}</strong><br><br>'.format(obj.batch_number))

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        html_parts.append('–ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{:.3f}</strong><br>'.format(obj.received_qty))
        html_parts.append('–û—Å—Ç–∞–≤–∞—â–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{:.3f}</strong><br>'.format(obj.remaining_qty))
        html_parts.append('–ò–∑–ø–æ–ª–∑–≤–∞–Ω–æ: <strong>{:.3f}</strong> ({:.1f}%)<br><br>'.format(consumed, consumption_pct))

        # –°—Ç–æ–π–Ω–æ—Å—Ç
        if obj.cost_price > 0:
            total_value = obj.remaining_qty * obj.cost_price
            html_parts.append('–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü–∞: <strong>{:.4f} –ª–≤</strong><br>'.format(obj.cost_price))
            html_parts.append('–°—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –æ—Å—Ç–∞–Ω–∞–ª–æ—Ç–æ: <strong>{:.2f} –ª–≤</strong><br><br>'.format(total_value))

        # –°—Ä–æ–∫ –Ω–∞ –≥–æ–¥–Ω–æ—Å—Ç
        if obj.expiry_date:
            today = timezone.now().date()
            days_to_expiry = (obj.expiry_date - today).days

            if days_to_expiry < 0:
                html_parts.append(
                    '‚ö†Ô∏è <strong style="color: red;">–ò–∑—Ç–µ–∫—ä–ª –ø—Ä–µ–¥–∏ {} –¥–Ω–∏!</strong><br>'.format(abs(days_to_expiry)))
            elif days_to_expiry <= 30:
                html_parts.append(
                    '‚è∞ <strong style="color: orange;">–ò–∑—Ç–∏—á–∞ —Å–ª–µ–¥ {} –¥–Ω–∏</strong><br>'.format(days_to_expiry))
            else:
                html_parts.append('‚úÖ –°—Ä–æ–∫: <strong>{} –¥–Ω–∏</strong><br>'.format(days_to_expiry))

        html_parts.append('</div>')
        return mark_safe(''.join(html_parts))

    batch_analytics.short_description = _('Batch Analytics')

    def conversion_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—è"""
        if not obj.conversion_date:
            return '–ù—è–º–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—è'

        html_parts = ['üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–æ –Ω–∞: <strong>{}</strong><br>'.format(obj.conversion_date)]
        if obj.original_source:
            html_parts.append('–ò–∑—Ç–æ—á–Ω–∏–∫: {}'.format(obj.original_source))

        return mark_safe(''.join(html_parts))

    conversion_info.short_description = _('Conversion Info')

    def consumption_rate(self, obj):
        """–°–∫–æ—Ä–æ—Å—Ç –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ"""
        if not obj.received_date or obj.remaining_qty == obj.received_qty:
            return '–ù—è–º–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ'

        days_since_received = (timezone.now().date() - obj.received_date.date()).days
        if days_since_received == 0:
            return '–ü–æ–ª—É—á–µ–Ω–æ –¥–Ω–µ—Å'

        consumed = obj.received_qty - obj.remaining_qty
        daily_rate = consumed / days_since_received

        if obj.remaining_qty > 0 and daily_rate > 0:
            days_remaining = obj.remaining_qty / daily_rate
            html_parts = []
            html_parts.append('üìà –î–Ω–µ–≤–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: <strong>{:.3f}</strong><br>'.format(daily_rate))
            html_parts.append('üóìÔ∏è –û—á–∞–∫–≤–∞–Ω–æ –∏–∑—á–µ—Ä–ø–≤–∞–Ω–µ: <strong>{:.0f} –¥–Ω–∏</strong>'.format(days_remaining))

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–∫–æ —â–µ —Å–µ –∏–∑—á–µ—Ä–ø–∏ –ø—Ä–µ–¥–∏ —Å—Ä–æ–∫–∞ –Ω–∞ –≥–æ–¥–Ω–æ—Å—Ç
            if obj.expiry_date:
                days_to_expiry = (obj.expiry_date - timezone.now().date()).days
                if days_remaining > days_to_expiry:
                    html_parts.append('<br><span style="color: red;">‚ö†Ô∏è –©–µ –∏–∑—Ç–µ—á–µ –ø—Ä–µ–¥–∏ –¥–∞ —Å–µ –∏–∑—á–µ—Ä–ø–∏!</span>')

            return mark_safe(''.join(html_parts))

        return '–ü–æ—Ç—Ä–µ–±–µ–Ω–æ: {:.3f} –∑–∞ {} –¥–Ω–∏'.format(consumed, days_since_received)

    consumption_rate.short_description = _('Consumption Rate')


# =================================================================
# INVENTORY MOVEMENT ADMIN
# =================================================================

@admin.register(InventoryMovement)
class InventoryMovementAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω –∑–∞ inventory movements - —Å–∞–º–æ —á–µ—Ç–µ–Ω–µ"""

    list_display = [
        'movement_info', 'product_info', 'location', 'quantity_display',
        'cost_price', 'document_info', 'movement_date', 'created_by'
    ]

    list_filter = [
        'movement_type', 'location',
        ('movement_date', admin.DateFieldListFilter),
        ('created_at', admin.DateFieldListFilter),
        'created_by',
    ]

    search_fields = [
        'product__code', 'product__name', 'location__code',
        'batch_number', 'source_document_number', 'reason'
    ]

    readonly_fields = [
        'movement_type', 'quantity', 'cost_price', 'product', 'location',
        'from_location', 'to_location', 'batch_number', 'expiry_date',
        'serial_number', 'source_document_type', 'source_document_number',
        'source_document_line_id', 'movement_date', 'reason',
        'created_at', 'created_by', 'movement_analysis'
    ]

    ordering = ['-created_at']

    date_hierarchy = 'movement_date'

    fieldsets = (
        (_('Movement Details'), {
            'fields': (
                'movement_type', 'product', 'location', 'from_location', 'to_location'
            )
        }),
        (_('Quantities & Cost'), {
            'fields': ('quantity', 'cost_price')
        }),
        (_('Batch Information'), {
            'fields': ('batch_number', 'expiry_date', 'serial_number'),
            'classes': ('collapse',)
        }),
        (_('Source Document'), {
            'fields': (
                'source_document_type', 'source_document_number',
                'source_document_line_id'
            ),
            'classes': ('collapse',)
        }),
        (_('Additional Info'), {
            'fields': ('movement_date', 'reason')
        }),
        (_('System Information'), {
            'fields': ('created_at', 'created_by', 'movement_analysis'),
            'classes': ('collapse',)
        })
    )

    def has_add_permission(self, request):
        """–ó–∞–±—Ä–∞–Ω–∞ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ - –¥–≤–∏–∂–µ–Ω–∏—è—Ç–∞ —Å–µ —Å—ä–∑–¥–∞–≤–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ"""
        return False

    def has_delete_permission(self, request, obj=None):
        """–ó–∞–±—Ä–∞–Ω–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ - –¥–≤–∏–∂–µ–Ω–∏—è—Ç–∞ —Å–∞ audit trail"""
        return False

    def movement_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ—Ç–æ"""
        direction_icons = {
            'IN': '‚û°Ô∏è',
            'OUT': '‚¨ÖÔ∏è',
            'TRANSFER': 'üîÑ',
            'ADJUSTMENT': '‚öñÔ∏è',
            'PRODUCTION': 'üè≠',
            'CYCLE_COUNT': 'üìã'
        }

        icon = direction_icons.get(obj.movement_type, '‚ùì')
        type_display = obj.get_movement_type_display()

        return mark_safe(
            '<span style="font-size: 1.2em;">{}</span><br><span style="font-size: 0.9em;">{}</span>'.format(icon,
                                                                                                            type_display)
        )

    movement_info.short_description = _('Type')

    def product_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        html_parts = []
        html_parts.append('<strong>{}</strong><br>'.format(obj.product.code))
        html_parts.append('<span style="font-size: 0.9em;">{}</span>'.format(obj.product.name[:40]))

        if obj.batch_number:
            html_parts.append('<br><span style="font-size: 0.8em; color: blue;">üè∑Ô∏è {}</span>'.format(obj.batch_number))

        return mark_safe(''.join(html_parts))

    product_info.short_description = _('Product')

    def quantity_display(self, obj):
        """–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ—Ç–æ - –∫–∞—Ç–æ –æ—Ç–¥–µ–ª–µ–Ω –º–µ—Ç–æ–¥"""
        return mark_safe(
            '<strong style="font-size: 1.1em; font-family: monospace;">{:.3f}</strong>'.format(obj.quantity)
        )

    quantity_display.short_description = _('Quantity')

    def document_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑—Ç–æ—á–Ω–∏–∫"""
        if not obj.source_document_type:
            return mark_safe('<span style="color: gray;">–ù—è–º–∞</span>')

        html_parts = ['<strong>{}</strong><br>'.format(obj.source_document_type)]

        if obj.source_document_number:
            html_parts.append('<span style="font-size: 0.9em;">{}</span>'.format(obj.source_document_number))

        if obj.source_document_line_id:
            html_parts.append(
                '<br><span style="font-size: 0.8em; color: gray;">–†–µ–¥ #{}</span>'.format(obj.source_document_line_id))

        return mark_safe(''.join(html_parts))

    document_info.short_description = _('Source Document')

    def movement_analysis(self, obj):
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ—Ç–æ"""
        if not obj.pk:
            return '–ù–µ –µ –Ω–∞–ª–∏—á–Ω–æ –∑–∞ –Ω–æ–≤–∏ –∑–∞–ø–∏—Å–∏'

        html_parts = []
        html_parts.append('<div style="background: #f8f9fa; padding: 10px; border-radius: 5px;">')
        html_parts.append('üìä <strong>–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–µ #{}</strong><br><br>'.format(obj.id))

        # –û—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        direction = "–í—Ö–æ–¥—è—â–æ" if obj.is_incoming else "–ò–∑—Ö–æ–¥—è—â–æ"
        html_parts.append('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <strong>{}</strong><br>'.format(direction))
        html_parts.append('–¢–∏–ø: <strong>{}</strong><br>'.format(obj.get_movement_type_display()))
        html_parts.append('–ü—Ä–æ–¥—É–∫—Ç: <strong>{} - {}</strong><br>'.format(obj.product.code, obj.product.name))
        html_parts.append('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <strong>{:.3f}</strong><br>'.format(obj.quantity))
        html_parts.append('–ï–¥–∏–Ω–∏—á–Ω–∞ —Ü–µ–Ω–∞: <strong>{:.4f} –ª–≤</strong><br>'.format(obj.cost_price))

        # –û–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
        total_value = obj.quantity * obj.cost_price
        html_parts.append('–û–±—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç: <strong>{:.2f} –ª–≤</strong><br><br>'.format(total_value))

        # –õ–æ–∫–∞—Ü–∏–∏
        html_parts.append('–õ–æ–∫–∞—Ü–∏—è: <strong>{} - {}</strong><br>'.format(obj.location.code, obj.location.name))
        if obj.from_location:
            html_parts.append('–û—Ç –ª–æ–∫–∞—Ü–∏—è: <strong>{}</strong><br>'.format(obj.from_location.code))
        if obj.to_location:
            html_parts.append('–î–æ –ª–æ–∫–∞—Ü–∏—è: <strong>{}</strong><br>'.format(obj.to_location.code))

        # –í—Ä–µ–º–µ–≤–∏ –¥–∞–Ω–Ω–∏
        html_parts.append('<br>–î–∞—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏–µ: <strong>{}</strong><br>'.format(obj.movement_date))
        html_parts.append('–°—ä–∑–¥–∞–¥–µ–Ω–æ: <strong>{}</strong><br>'.format(obj.created_at.strftime("%d.%m.%Y %H:%M")))

        if obj.created_by:
            html_parts.append('–°—ä–∑–¥–∞–¥–µ–Ω–æ –æ—Ç: <strong>{}</strong><br>'.format(obj.created_by.username))

        # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if obj.reason:
            html_parts.append('<br>–ü—Ä–∏—á–∏–Ω–∞: <em>{}</em><br>'.format(obj.reason))

        html_parts.append('</div>')
        return mark_safe(''.join(html_parts))

    movement_analysis.short_description = _('Movement Analysis')


# =================================================================
# ADMIN ACTIONS
# =================================================================

def recalculate_inventory_items(modeladmin, request, queryset):
    """–ü—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ inventory items"""
    count = 0
    for item in queryset:
        try:
            # –¢—É–∫ –±–∏ —Ç—Ä—è–±–≤–∞–ª–æ –¥–∞ –∏–º–∞ service –º–µ—Ç–æ–¥ –∑–∞ –ø—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ
            # –ó–∞ –º–æ–º–µ–Ω—Ç–∞ —Å–∞–º–æ —Å–µ –∑–∞–ø–∏—Å–≤–∞ –æ–±–µ–∫—Ç–∞ –∑–∞ trigger –Ω–∞ update
            item.save()
            count += 1
        except Exception as e:
            messages.error(request, f'–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ {item}: {e}')

    messages.success(request, f'–ü—Ä–µ–∏–∑—á–∏—Å–ª–µ–Ω–∏ {count} –∑–∞–ø–∏—Å–∞')


recalculate_inventory_items.short_description = "–ü—Ä–µ–∏–∑—á–∏—Å–ª–∏ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ inventory items"


def export_stock_report(modeladmin, request, queryset):
    """–ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ —Å–∫–ª–∞–¥–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∞"""
    import csv
    from django.http import HttpResponse

    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = 'attachment; filename="stock_report.csv"'

    writer = csv.writer(response)
    writer.writerow([
        'Location', 'Product Code', 'Product Name', 'Current Qty',
        'Reserved Qty', 'Available Qty', 'Avg Cost', 'Stock Value'
    ])

    for item in queryset:
        available = item.current_qty - item.reserved_qty
        stock_value = item.current_qty * item.avg_cost

        writer.writerow([
            item.location.code,
            item.product.code,
            item.product.name,
            item.current_qty,
            item.reserved_qty,
            available,
            item.avg_cost,
            stock_value
        ])

    return response


export_stock_report.short_description = "–ï–∫—Å–ø–æ—Ä—Ç –Ω–∞ —Å–∫–ª–∞–¥–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∞"

# –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ actions –∫—ä–º admin –∫–ª–∞—Å–æ–≤–µ—Ç–µ
InventoryItemAdmin.actions = [recalculate_inventory_items, export_stock_report]