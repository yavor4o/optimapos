# Generated by Django 5.2.3 on 2025-07-12 10:59

import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for quick reference', max_length=100, unique=True, verbose_name='Code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Name')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/logos/', verbose_name='Brand Logo')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ISO 4217 code like BGN, EUR, USD', max_length=3, unique=True, verbose_name='Currency Code')),
                ('name', models.CharField(max_length=50, verbose_name='Currency Name')),
                ('symbol', models.CharField(blank=True, help_text='Currency symbol like лв, €, $', max_length=5, verbose_name='Symbol')),
                ('is_base', models.BooleanField(default=False, help_text='Only one currency can be base', verbose_name='Is Base Currency')),
                ('decimal_places', models.PositiveSmallIntegerField(default=2, help_text='Number of decimal places for amounts', verbose_name='Decimal Places')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for quick reference', max_length=100, unique=True, verbose_name='Code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Name')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('key', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Card'), ('BANK', 'Bank Transfer'), ('VOUCHER', 'Voucher/Coupon'), ('CREDIT', 'On Credit')], help_text='Internal system key for payment type', max_length=20, unique=True, verbose_name='System Key')),
                ('is_cash', models.BooleanField(default=False, help_text='Whether this is a cash-based payment', verbose_name='Is Cash Payment')),
                ('requires_reference', models.BooleanField(default=False, help_text='Whether reference number is required (e.g., card auth)', verbose_name='Requires Reference')),
                ('allows_change', models.BooleanField(default=False, help_text='Whether change can be given (only for cash)', verbose_name='Allows Change')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether manager approval is required', verbose_name='Requires Approval')),
                ('is_fiscal', models.BooleanField(default=True, help_text='Whether to include in fiscal reports', verbose_name='Is Fiscal')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum allowed amount for this payment type', max_digits=10, null=True, verbose_name='Minimum Amount')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum allowed amount for this payment type', max_digits=10, null=True, verbose_name='Maximum Amount')),
                ('sort_order', models.IntegerField(default=0, help_text='Display order in POS', verbose_name='Sort Order')),
            ],
            options={
                'verbose_name': 'Payment Type',
                'verbose_name_plural': 'Payment Types',
                'ordering': ['sort_order', 'code'],
            },
        ),
        migrations.CreateModel(
            name='POSLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code like POS01, CASH1', max_length=10, unique=True, verbose_name='POS Code')),
                ('name', models.CharField(max_length=100, verbose_name='POS Location Name')),
                ('address', models.TextField(blank=True, verbose_name='Address')),
                ('fiscal_device_serial', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Fiscal Device Serial')),
                ('fiscal_device_number', models.CharField(blank=True, help_text='Official registration number', max_length=20, verbose_name='Fiscal Device Number')),
                ('allow_negative_stock', models.BooleanField(default=False, help_text='Whether to allow sales when stock is insufficient', verbose_name='Allow Negative Stock Sales')),
                ('require_customer', models.BooleanField(default=False, help_text='Whether customer selection is mandatory', verbose_name='Require Customer')),
                ('receipt_printer', models.CharField(blank=True, help_text='Receipt printer name/address', max_length=100, verbose_name='Receipt Printer')),
                ('opens_at', models.TimeField(blank=True, null=True, verbose_name='Opens At')),
                ('closes_at', models.TimeField(blank=True, null=True, verbose_name='Closes At')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Last Updated At')),
            ],
            options={
                'verbose_name': 'POS Location',
                'verbose_name_plural': 'POS Locations',
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for quick reference', max_length=100, unique=True, verbose_name='Code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Name')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('category', models.CharField(choices=[('FOOD', 'Food Products'), ('NONFOOD', 'Non-Food Products'), ('TOBACCO', 'Tobacco Products'), ('ALCOHOL', 'Alcoholic Beverages'), ('SERVICE', 'Services')], default='FOOD', help_text='Main category for reporting', max_length=20, verbose_name='Category')),
                ('requires_expiry_date', models.BooleanField(default=False, help_text='Whether products of this type must have expiry dates', verbose_name='Requires Expiry Date')),
            ],
            options={
                'verbose_name': 'Product Type',
                'verbose_name_plural': 'Product Types',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for quick reference', max_length=100, unique=True, verbose_name='Code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Name')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('unit_type', models.CharField(choices=[('PIECE', 'Piece/Count'), ('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('LENGTH', 'Length'), ('AREA', 'Area')], default='PIECE', max_length=20, verbose_name='Unit Type')),
                ('allow_decimals', models.BooleanField(default=True, help_text='Whether fractional quantities are allowed', verbose_name='Allow Decimals')),
                ('decimal_places', models.PositiveSmallIntegerField(default=3, help_text='Number of decimal places to display', verbose_name='Decimal Places')),
                ('symbol', models.CharField(blank=True, help_text='Display symbol (e.g., kg, л, м²)', max_length=10, verbose_name='Symbol')),
            ],
            options={
                'verbose_name': 'Unit of Measure',
                'verbose_name_plural': 'Units of Measure',
                'ordering': ['unit_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code like DRINKS, FOOD, etc.', max_length=20, unique=True, verbose_name='Group Code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Group Name')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is Active')),
                ('sort_order', models.IntegerField(default=0, help_text='Used for custom ordering in reports and UI', verbose_name='Sort Order')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='nomenclatures.productgroup', verbose_name='Parent Group')),
            ],
            options={
                'verbose_name': 'Product Group',
                'verbose_name_plural': 'Product Groups',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaxGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for quick reference', max_length=100, unique=True, verbose_name='Code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Name')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('rate', models.DecimalField(decimal_places=2, help_text='Tax rate as percentage', max_digits=5, verbose_name='Rate (%)')),
                ('tax_type', models.CharField(choices=[('VAT', 'VAT/ДДС'), ('EXCISE', 'Excise/Акциз'), ('OTHER', 'Other')], default='VAT', max_length=20, verbose_name='Tax Type')),
                ('is_default', models.BooleanField(default=False, help_text='Default tax group for new products', verbose_name='Is Default')),
                ('is_reverse_charge', models.BooleanField(default=False, help_text='For EU reverse charge mechanism', verbose_name='Reverse Charge')),
            ],
            options={
                'verbose_name': 'Tax Group',
                'verbose_name_plural': 'Tax Groups',
                'ordering': ['tax_type', 'rate'],
                'constraints': [models.UniqueConstraint(fields=('name', 'rate'), name='unique_tax_group_name_rate'), models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('is_default',), name='unique_default_tax_group')],
            },
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, verbose_name='Date')),
                ('units', models.DecimalField(decimal_places=0, default=1, help_text='Number of currency units (e.g., 1, 100, 1000)', max_digits=10, verbose_name='Currency Units')),
                ('buy_rate', models.DecimalField(decimal_places=6, help_text='Rate when we buy this currency', max_digits=10, verbose_name='Buy Rate')),
                ('sell_rate', models.DecimalField(decimal_places=6, help_text='Rate when we sell this currency', max_digits=10, verbose_name='Sell Rate')),
                ('central_rate', models.DecimalField(decimal_places=6, help_text='Official rate from central bank', max_digits=10, verbose_name='Central Bank Rate')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_exchange_rates', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='nomenclatures.currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Exchange Rate',
                'verbose_name_plural': 'Exchange Rates',
                'ordering': ['-date', 'currency'],
                'indexes': [models.Index(fields=['-date', 'currency'], name='nomenclatur_date_506fc6_idx'), models.Index(fields=['currency', '-date'], name='nomenclatur_currenc_77e194_idx')],
                'unique_together': {('currency', 'date')},
            },
        ),
    ]
