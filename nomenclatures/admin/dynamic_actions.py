

from django.contrib import admin
from django.contrib import messages
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _
from django.core.exceptions import PermissionDenied, ValidationError

from nomenclatures.services.approval_service import ApprovalService


class DynamicApprovalMixin:
    """
    Mixin –∑–∞ admin –∫–ª–∞—Å–æ–≤–µ –∫–æ–π—Ç–æ –¥–æ–±–∞–≤—è –¥–∏–Ω–∞–º–∏—á–Ω–∏ approval actions

    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞ admin actions —Å–ø–æ—Ä–µ–¥ ApprovalRule –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
    """

    def get_actions(self, request):
        """Override –∑–∞ –¥–∞ –¥–æ–±–∞–≤–∏–º –¥–∏–Ω–∞–º–∏—á–Ω–∏ actions"""
        actions = super().get_actions(request)

        # –î–æ–±–∞–≤—è–º–µ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ç–µ approval actions
        actions.update(self._get_approval_actions(request))

        return actions

    def _get_approval_actions(self, request):
        """–ì–µ–Ω–µ—Ä–∏—Ä–∞ –¥–∏–Ω–∞–º–∏—á–Ω–∏ approval actions"""

        # –û—Å–Ω–æ–≤–Ω–∏ actions –∫–æ–∏—Ç–æ –≤–∏–Ω–∞–≥–∏ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏
        base_actions = {
            'dynamic_approve_documents': (
                self._create_approval_action('approve'),
                'dynamic_approve_documents',
                _('Approve selected documents (dynamic)')
            ),
            'dynamic_reject_documents': (
                self._create_approval_action('reject'),
                'dynamic_reject_documents',
                _('Reject selected documents (dynamic)')
            ),
            'show_workflow_status': (
                self._create_workflow_status_action(),
                'show_workflow_status',
                _('Show workflow status')
            )
        }

        return base_actions

    def _create_approval_action(self, action_type):
        """–°—ä–∑–¥–∞–≤–∞ approval action —Ñ—É–Ω–∫—Ü–∏—è"""

        def approval_action(modeladmin, request, queryset):
            """–î–∏–Ω–∞–º–∏—á–Ω–∞ approval action"""

            success_count = 0
            error_count = 0

            for document in queryset:
                try:
                    if action_type == 'approve':
                        result = self._handle_document_approval(document, request.user)
                    elif action_type == 'reject':
                        result = self._handle_document_rejection(document, request.user, request)

                    if result.get('success'):
                        success_count += 1
                        messages.success(
                            request,
                            f"{document}: {result.get('message', 'Action completed')}"
                        )
                    else:
                        error_count += 1
                        messages.error(
                            request,
                            f"{document}: {result.get('message', 'Action failed')}"
                        )

                except (PermissionDenied, ValidationError) as e:
                    error_count += 1
                    messages.error(request, f"{document}: {str(e)}")
                except Exception as e:
                    error_count += 1
                    messages.error(request, f"{document}: Unexpected error - {str(e)}")

            # –û–±–æ–±—â–µ–Ω–∏–µ
            if success_count:
                messages.success(
                    request,
                    _('Successfully processed %(count)d documents.') % {'count': success_count}
                )

            if error_count:
                messages.warning(
                    request,
                    _('%(count)d documents could not be processed.') % {'count': error_count}
                )

        # –ó–∞–¥–∞–≤–∞–º–µ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ –Ω–∞ action-a
        action_name = f"{action_type.title()} selected documents"
        approval_action.short_description = _(action_name)

        return approval_action

    def _handle_document_approval(self, document, user):
        """
        –§–ò–ö–°–ò–†–ê–ù–û: –û–±—Ä–∞–±–æ—Ç–≤–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ—Ç–æ –Ω–∞ –µ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç

        –î–æ–±–∞–≤–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ draft ‚Üí submitted —Å–ª—É—á–∞—è
        """

        # –°–ü–ï–¶–ò–ê–õ–ï–ù –°–õ–£–ß–ê–ô: draft ‚Üí submitted (submit, –Ω–µ approval!)
        if document.status == 'draft':
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–æ–∂–µ –¥–∞ —Å–µ submit-–Ω–µ
                if not hasattr(document, 'lines') or not document.lines.exists():
                    return {
                        'success': False,
                        'message': 'Cannot submit request without lines'
                    }

                # –î–ò–†–ï–ö–¢–ï–ù SUBMIT –ë–ï–ó ApprovalService
                document.status = 'submitted'
                if hasattr(document, 'updated_by'):
                    document.updated_by = user
                document.save()

                return {
                    'success': True,
                    'message': f'Submitted for approval (draft ‚Üí submitted)'
                }

            except Exception as e:
                return {
                    'success': False,
                    'message': f'Error submitting document: {str(e)}'
                }

    def _handle_document_rejection(self, document, user, request):
        """–û–±—Ä–∞–±–æ—Ç–≤–∞ –æ—Ç—Ö–≤—ä—Ä–ª—è–Ω–µ—Ç–æ –Ω–∞ –µ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç"""

        # –ó–∞ rejection –º–æ–∂–µ –¥–∞ –ø–æ–∏—Å–∫–∞–º–µ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        # –ó–∞ –ø—Ä–æ—Å—Ç–æ—Ç–∞, –∏–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞
        reason = f"Rejected via admin action by {user.get_full_name()}"

        result = ApprovalService.reject_document(
            document=document,
            user=user,
            reason=reason
        )

        return result

    def _create_workflow_status_action(self):
        """–°—ä–∑–¥–∞–≤–∞ action –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ workflow —Å—Ç–∞—Ç—É—Å"""

        def show_workflow_status(modeladmin, request, queryset):
            """–ü–æ–∫–∞–∑–≤–∞ workflow —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏"""

            for document in queryset:
                try:
                    workflow_status = ApprovalService.get_workflow_status(document)

                    # –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞
                    status_info = [
                        f"üìÑ {document}",
                        f"üîÑ Current Status: {workflow_status['current_status']}",
                        f"‚ö° Available Actions: {workflow_status['available_transitions']}",
                        f"‚úÖ Completed: {'Yes' if workflow_status['is_completed'] else 'No'}"
                    ]

                    # –ü–æ–∫–∞–∑–≤–∞–º–µ workflow –Ω–∏–≤–∞—Ç–∞
                    if workflow_status['workflow_levels']:
                        status_info.append("üìã Workflow Levels:")
                        for level in workflow_status['workflow_levels']:
                            status = "‚úÖ" if level['completed'] else "‚è≥"
                            status_info.append(
                                f"  {status} Level {level['level']}: {level['name']} ‚Üí {level['to_status']}"
                            )

                    # –ü–æ–∫–∞–∑–≤–∞–º–µ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞
                    if workflow_status['approval_history']:
                        status_info.append("üìú Recent History:")
                        for log in workflow_status['approval_history'][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 3
                            status_info.append(
                                f"  üïí {log['timestamp'].strftime('%Y-%m-%d %H:%M')} - "
                                f"{log['actor']}: {log['action']}"
                            )

                    # –ü–æ–∫–∞–∑–≤–∞–º–µ –∫–∞—Ç–æ info message
                    messages.info(request, "\n".join(status_info))

                except Exception as e:
                    messages.error(request, f"{document}: Error getting workflow status - {str(e)}")

        show_workflow_status.short_description = _("Show workflow status for selected documents")
        return show_workflow_status

    # =====================
    # DISPLAY METHODS FOR ADMIN LIST
    # =====================

    def workflow_status_display(self, obj):
        """
        –ü–û–î–û–ë–†–ï–ù: Display method –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ workflow —Å—Ç–∞—Ç—É—Å –≤ list_display
        """
        try:
            # –°–ü–ï–¶–ò–ê–õ–ï–ù –°–õ–£–ß–ê–ô: draft –¥–æ–∫—É–º–µ–Ω—Ç–∏
            if obj.status == 'draft':
                return format_html('<span style="color: orange;">üìù Ready to Submit</span>')

            # –ó–ê –û–°–¢–ê–ù–ê–õ–ò–¢–ï: ApprovalService –ª–æ–≥–∏–∫–∞
            workflow_status = ApprovalService.get_workflow_status(obj)

            if workflow_status['is_completed']:
                return format_html('<span style="color: green;">‚úÖ Completed</span>')
            elif workflow_status['available_transitions']:
                return format_html(
                    '<span style="color: orange;">‚è≥ {} actions available</span>',
                    len(workflow_status['available_transitions'])
                )
            else:
                return format_html('<span style="color: gray;">‚è∏Ô∏è Waiting</span>')

        except Exception:
            return format_html('<span style="color: red;">‚ùå Error</span>')

    workflow_status_display.short_description = _('Workflow Status')

    def available_actions_display(self, obj):
        """
        –ü–û–î–û–ë–†–ï–ù: Display method –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –¥–æ—Å—Ç—ä–ø–Ω–∏ actions
        """
        try:
            # –°–ü–ï–¶–ò–ê–õ–ï–ù –°–õ–£–ß–ê–ô: draft –¥–æ–∫—É–º–µ–Ω—Ç–∏
            if obj.status == 'draft':
                if hasattr(obj, 'lines') and obj.lines.exists():
                    return format_html('<span style="color: blue;">üì§ Can Submit</span>')
                else:
                    return format_html('<span style="color: gray;">üìù Add Lines First</span>')

            # –ó–ê –û–°–¢–ê–ù–ê–õ–ò–¢–ï: ApprovalService –ª–æ–≥–∏–∫–∞
            if hasattr(self, '_current_request') and self._current_request:
                user = self._current_request.user
                transitions = ApprovalService.get_available_transitions(obj, user)

                if transitions:
                    actions = [t['to_status'] for t in transitions]
                    return format_html(
                        '<span style="color: blue;">üìã {}</span>',
                        ', '.join(actions)
                    )
                else:
                    return format_html('<span style="color: gray;">No actions</span>')
            else:
                return "Login required"

        except Exception:
            return format_html('<span style="color: red;">Error</span>')



    available_actions_display.short_description = _('Available Actions')

    def changelist_view(self, request, extra_context=None):
        """Override –∑–∞ –¥–∞ –∑–∞–ø–∞–∑–∏–º request context"""
        self._current_request = request
        return super().changelist_view(request, extra_context)


# =====================
# ENHANCED PURCHASE REQUEST ADMIN
# =====================

class DynamicPurchaseRequestAdmin(DynamicApprovalMixin, admin.ModelAdmin):
    """
    Enhanced Purchase Request Admin —Å –¥–∏–Ω–∞–º–∏—á–Ω–∏ approval actions
    """

    list_display = [
        'document_number', 'supplier', 'status_display',
        'estimated_total_display', 'workflow_status_display',
        'available_actions_display', 'requested_by', 'document_date'
    ]

    list_filter = [
        'status', 'urgency_level', 'request_type',
        'document_date', 'supplier'
    ]

    search_fields = [
        'document_number', 'supplier__name', 'business_justification'
    ]

    readonly_fields = [
        'document_number', 'created_at', 'updated_at',
        'workflow_status_display', 'approval_history_display'
    ]

    def approval_history_display(self, obj):
        """–ü–æ–∫–∞–∑–≤–∞ approval –∏—Å—Ç–æ—Ä–∏—è—Ç–∞"""
        if not obj.pk:
            return "Save document first"

        try:
            history = ApprovalService.get_approval_history(obj)

            if not history:
                return "No approval history"

            history_html = []
            for log in history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 5 –∑–∞–ø–∏—Å–∞
                history_html.append(
                    f"üïí {log['timestamp'].strftime('%m/%d %H:%M')} - "
                    f"<strong>{log['actor']}</strong>: {log['action']} "
                    f"({log['from_status']} ‚Üí {log['to_status']})"
                )

            return format_html('<br>'.join(history_html))

        except Exception as e:
            return f"Error: {str(e)}"

    approval_history_display.short_description = _('Approval History')

    def status_display(self, obj):
        """Enhanced status display with workflow context"""
        try:
            workflow_status = ApprovalService.get_workflow_status(obj)

            # –¶–≤–µ—Ç–æ–≤–µ —Å–ø–æ—Ä–µ–¥ —Å—Ç–∞—Ç—É—Å–∞
            colors = {
                'draft': '#6c757d',
                'submitted': '#ffc107',
                'regional_approved': '#28a745',
                'central_approved': '#17a2b8',
                'converted': '#007bff',
                'rejected': '#dc3545',
                'cancelled': '#6c757d'
            }

            color = colors.get(obj.status, '#6c757d')

            # –î–æ–±–∞–≤—è–º–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞ progress
            if workflow_status['is_completed']:
                indicator = "‚úÖ"
            elif workflow_status['available_transitions']:
                indicator = "‚è≥"
            else:
                indicator = "‚è∏Ô∏è"

            return format_html(
                '{} <span style="color: {}; font-weight: bold;">{}</span>',
                indicator,
                color,
                obj.status.replace('_', ' ').title()
            )

        except Exception:
            return obj.status

    status_display.short_description = _('Status')