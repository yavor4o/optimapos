# purchases/models/base_nomenclature.py - CLEAN REFACTORED
import warnings

from django.db import models
from django.utils.translation import gettext_lazy as _
from django.core.exceptions import ValidationError
from django.utils import timezone
from decimal import Decimal

import logging

from core.models.company import Company
from products.models import Product

logger = logging.getLogger(__name__)





# =================================================================
# BASE DOCUMENT - CLEAN MODEL
# =================================================================

class BaseDocument(models.Model):


    # =====================
    # DOCUMENT TYPE INTEGRATION
    # =====================
    document_type = models.ForeignKey(
        'nomenclatures.DocumentType',
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        verbose_name=_('Document Type'),
        help_text=_('Set by DocumentService on creation'),
        limit_choices_to={'is_active': True}
    )

    # =====================
    # CORE FIELDS
    # =====================
    document_number = models.CharField(
        _('Document Number'),
        max_length=50,
        unique=True,
        blank=True,  # DocumentService ще генерира
        help_text=_('Generated by DocumentService')
    )

    document_date = models.DateField(
        _('Document Date'),
        default=timezone.now,
        help_text=_('Date when document was created')
    )

    status = models.CharField(
        _('Status'),
        max_length=30,
        blank=True,  # DocumentService ще сетне
        help_text=_('Managed by DocumentService')
        # NO choices - dynamic from DocumentType!
    )

    # =====================
    # BUSINESS RELATIONSHIPS
    # =====================
    supplier = models.ForeignKey(
        'partners.Supplier',
        on_delete=models.PROTECT,
        verbose_name=_('Supplier'),
        help_text=_('The supplier for this document')
    )

    location = models.ForeignKey(
        'inventory.InventoryLocation',
        on_delete=models.PROTECT,
        verbose_name=_('Location'),
        help_text=_('Business location')
    )

    # =====================
    # REFERENCE FIELDS
    # =====================
    external_reference = models.CharField(
        _('External Reference'),
        max_length=100,
        blank=True,
        help_text=_('External PO number, contract reference, etc.')
    )

    notes = models.TextField(
        _('Notes'),
        blank=True,
        help_text=_('Additional notes and comments')
    )

    # =====================
    # AUDIT FIELDS
    # =====================
    created_by = models.ForeignKey(
        'accounts.User',
        on_delete=models.PROTECT,
        related_name='%(app_label)s_%(class)s_created',
        verbose_name=_('Created By'),
        null=True,  # Може да е null за стари записи
        blank=True,
        help_text=_('Set by DocumentService on creation')
    )

    updated_by = models.ForeignKey(
        'accounts.User',
        on_delete=models.PROTECT,
        null=True,
        blank=True,
        related_name='%(app_label)s_%(class)s_updated',
        verbose_name=_('Updated By'),
        help_text=_('Set automatically on update')
    )

    created_at = models.DateTimeField(
        _('Created At'),
        auto_now_add=True
    )

    updated_at = models.DateTimeField(
        _('Updated At'),
        auto_now=True
    )

    # =====================
    # MANAGERS
    # =====================
    objects = DocumentManager()

    class Meta:
        abstract = True
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['status', '-created_at']),
            models.Index(fields=['supplier', '-document_date']),
            models.Index(fields=['location', 'status']),
            models.Index(fields=['document_type', 'status']),
        ]

    def __str__(self):
        if self.document_number:
            prefix = self.get_document_prefix()
            return f"{prefix}{self.document_number} - {self.supplier.name}"
        return f"New {self.__class__.__name__} - {self.supplier.name if self.supplier else 'No Supplier'}"

    # =====================
    # MINIMAL SAVE & CLEAN
    # =====================

    def clean(self):
        """
        САМО data validation - БЕЗ business logic
        DocumentService handles all business rules
        """
        super().clean()

        # Required fields validation ONLY
        if not self.supplier:
            raise ValidationError({'supplier': _('Supplier is required')})

        if not self.location:
            raise ValidationError({'location': _('Location is required')})

    def save(self, *args, **kwargs):
        # Автоматично номериране
        if not self.pk and not self.document_number:
            from nomenclatures.services.document_service import DocumentService
            self.document_number = DocumentService.generate_number_for(self)

        super().save(*args, **kwargs)

    # =====================
    # READ-ONLY HELPERS (без промени)
    # =====================

    def get_document_prefix(self):
        """Get document prefix from DocumentType or fallback"""
        if self.document_type and hasattr(self.document_type, 'prefix'):
            return self.document_type.prefix

        # Fallback mapping
        model_name = self._meta.model_name.lower()
        prefix_map = {
            'purchaserequest': 'REQ',
            'purchaseorder': 'ORD',
            'deliveryreceipt': 'DEL',
            'salesinvoice': 'INV',
        }
        return prefix_map.get(model_name, 'DOC')

    def get_document_type_key(self):
        """Get document type key for this model"""
        if self.document_type and hasattr(self.document_type, 'type_key'):
            return self.document_type.type_key

        # Fallback
        model_name = self._meta.model_name.lower()
        type_key_map = {
            'purchaserequest': 'purchase_request',
            'purchaseorder': 'purchase_order',
            'deliveryreceipt': 'delivery_receipt',
        }
        return type_key_map.get(model_name, model_name)

    def get_app_name(self):
        """Get app name for this model"""
        return self._meta.app_label

    # =====================
    # PROPERTIES (read-only)
    # =====================

    @property
    def is_initial(self):
        """Check if document is in initial status - CONFIGURATION DRIVEN"""
        try:
            from nomenclatures.models import DocumentTypeStatus
            config = DocumentTypeStatus.objects.filter(
                document_type=self.document_type,
                status__code=self.status,
                is_initial=True,
                is_active=True
            ).first()
            return bool(config)
        except:
            # Fallback за compatibility
            return self.status in ['draft', 'new']

    @property
    def is_final(self):
        """Check if document is in final status - CONFIGURATION DRIVEN"""
        try:
            from nomenclatures.models import DocumentTypeStatus
            config = DocumentTypeStatus.objects.filter(
                document_type=self.document_type,
                status__code=self.status,
                is_final=True,
                is_active=True
            ).first()
            return bool(config)
        except:
            # Fallback за compatibility
            return self.status in ['completed', 'closed', 'cancelled', 'archived']

    @property
    def is_cancellation(self):
        """Check if document is in cancellation status - CONFIGURATION DRIVEN"""
        try:
            from nomenclatures.models import DocumentTypeStatus
            config = DocumentTypeStatus.objects.filter(
                document_type=self.document_type,
                status__code=self.status,
                is_cancellation=True,
                is_active=True
            ).first()
            return bool(config)
        except:
            # Fallback за compatibility
            return self.status in ['cancelled']

    @property
    def can_edit(self):
        """Smart edit check - delegates to DocumentService"""
        try:
            from nomenclatures.services import DocumentService
            can_edit, _ = DocumentService.can_edit_document(self, user=None)
            return can_edit
        except:
            # Fallback за compatibility
            return not self.is_final

    def get_status_config(self):
        """Get DocumentTypeStatus configuration for current status"""
        try:
            from nomenclatures.models import DocumentTypeStatus
            return DocumentTypeStatus.objects.filter(
                document_type=self.document_type,
                status__code=self.status,
                is_active=True
            ).first()
        except:
            return None

    def has_lines(self):
        """Check if document has any lines"""
        lines = getattr(self, 'lines', None)
        return lines is not None and lines.exists()

    def get_lines_count(self):
        """Get number of lines"""
        lines = getattr(self, 'lines', None)
        return lines.count() if lines else 0

    def affects_inventory(self):
        """Check if this document type affects inventory"""
        if self.document_type:
            return getattr(self.document_type, 'affects_inventory', False)
        return False

    def get_inventory_direction(self):
        """Get inventory movement direction from DocumentType"""
        if self.document_type:
            return getattr(self.document_type, 'inventory_direction', 'none')
        return 'none'

    # =====================
    # DELEGATE TO SERVICES (не правим логика тук!)
    # =====================

    def get_available_actions(self, user):
        """
        Get available workflow actions for this document
        Delegates to DocumentService
        """
        from nomenclatures.services import DocumentService
        return DocumentService.get_available_actions(self, user)



    def get_workflow_history(self):
        """
        Get workflow history
        Delegates to ApprovalService
        """
        try:
            from nomenclatures.services import ApprovalService
            return ApprovalService.get_approval_history(self)  # Правилният метод!
        except ImportError:
            return []

    def get_next_statuses(self, user=None):
        """
        Get possible next statuses
        Delegates to DocumentService
        """
        from nomenclatures.services import DocumentService
        actions = DocumentService.get_available_actions(self, user)
        return [a['status'] for a in actions if a.get('can_perform', False)]



# =================================================================
# BASE DOCUMENT LINE - CLEAN MODEL
# =================================================================

class BaseDocumentLine(models.Model):
    """
    Base Document Line - CLEAN VERSION

    САМО essential line behavior:
    - Core fields
    - Basic validation
    - Helper methods

    NO complex calculations - moved to services!
    """

    # =====================
    # CORE FIELDS
    # =====================
    line_number = models.PositiveIntegerField(
        _('Line Number'),
        help_text=_('Line number within document (auto-generated)')
    )

    product = models.ForeignKey(
        Product,
        on_delete=models.PROTECT,
        verbose_name=_('Product'),
        help_text=_('Product for this line')
    )

    quantity = models.DecimalField(
        _('Quantity'),
        null=True,
        blank=True,
        max_digits=10,
        decimal_places=3,
        help_text=_('Quantity for this line')
    )

    unit = models.ForeignKey(
        'nomenclatures.UnitOfMeasure',
        on_delete=models.PROTECT,
        verbose_name=_('Unit'),
        help_text=_('Unit of measure')
    )

    notes = models.TextField(
        _('Line Notes'),
        blank=True,
        help_text=_('Notes specific to this line')
    )

    # =====================
    # MANAGERS
    # =====================
    objects = LineManager()

    class Meta:
        abstract = True
        ordering = ['line_number']
        indexes = [
            models.Index(fields=['product']),
            models.Index(fields=['line_number']),
        ]

    def __str__(self):
        return f"Line {self.line_number}: {self.product.code} x {self.quantity} {self.unit.code}"

    # =====================
    # BASIC VALIDATION
    # =====================

    def clean(self):
        """Basic line validation - tolerant to None quantity"""
        super().clean()


        if self.quantity is not None and self.quantity <= 0:
            raise ValidationError({
                'quantity': _('Quantity must be greater than zero')
            })

        # Product-unit compatibility validation
        if self.product and self.unit:
            # Check if Product has unit compatibility method
            if hasattr(self.product, 'is_unit_compatible'):
                if not self.product.is_unit_compatible(self.unit):
                    raise ValidationError({
                        'unit': _(f'Unit {self.unit.code} is not compatible with product {self.product.code}')
                    })
            # Basic fallback: check if unit matches product's base_unit
            elif hasattr(self.product, 'base_unit') and self.product.base_unit:
                if self.unit != self.product.base_unit:
                    # Warning but not error - allow different units for flexibility
                    logger.warning(
                        f"Unit {self.unit.code} differs from product {self.product.code} base unit {self.product.base_unit.code}")

    def save(self, *args, **kwargs):
        """Enhanced save with auto-line numbering"""
        # Auto-generate line number if not set
        if not self.line_number and hasattr(self, 'document'):
            document = getattr(self, 'document', None)
            if document and hasattr(document, 'lines'):
                max_line = document.lines.aggregate(
                    max_line=models.Max('line_number')
                )['max_line'] or 0
                self.line_number = max_line + 1

        # Auto-set unit from product if not provided
        if self.product and not self.unit:
            base_unit = getattr(self.product, 'base_unit', None)
            if base_unit:
                self.unit = base_unit

        super().save(*args, **kwargs)

    # =====================
    # HELPER METHODS
    # =====================

    def get_product_info(self):
        """Get extended product information"""
        if not self.product:
            return {}

        return {
            'code': getattr(self.product, 'code', ''),
            'name': getattr(self.product, 'name', ''),
            'category': getattr(self.product.category, 'name', None) if hasattr(self.product,
                                                                                'category') and self.product.category else None,
            'base_unit': getattr(self.product.base_unit, 'code', None) if hasattr(self.product,
                                                                                  'base_unit') and self.product.base_unit else None,
        }

    def get_unit_info(self):
        """Get unit information"""
        if not self.unit:
            return {}

        return {
            'code': getattr(self.unit, 'code', ''),
            'name': getattr(self.unit, 'name', ''),
            'symbol': getattr(self.unit, 'symbol', ''),
            'unit_type': getattr(self.unit, 'unit_type', ''),
            'allow_decimals': getattr(self.unit, 'allow_decimals', True),
            'decimal_places': getattr(self.unit, 'decimal_places', 3),
        }


















