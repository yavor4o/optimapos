# test.py - –ü—Ä–æ—Å—Ç —Ç–µ—Å—Ç –Ω–∞ PurchaseRequestService

import os
import sys
import django
from django.conf import settings

# Setup Django –ø—Ä–µ–¥–∏ import-–≤–∞–Ω–µ –Ω–∞ –º–æ–¥–µ–ª–∏
if not settings.configured:
    settings.configure(
        DEBUG=True,
        DATABASES={
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': ':memory:',
            }
        },
        INSTALLED_APPS=[
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.admin',  # –î–æ–±–∞–≤—è–º–µ admin
            'core',
            'nomenclatures',
            'products',
            'partners',
            'inventory',
            'purchases',
            'pricing',  # –î–æ–±–∞–≤—è–º–µ pricing app
        ],
        SECRET_KEY='test-secret-key',
        USE_TZ=True,
        DEFAULT_AUTO_FIELD='django.db.models.BigAutoField',
        AUTH_USER_MODEL='auth.User',  # –ò–∑–ø–æ–ª–∑–≤–∞–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—è User –º–æ–¥–µ–ª
    )
    django.setup()

from decimal import Decimal
from unittest.mock import Mock, patch, MagicMock


def test_create_request_basic():
    """–ù–∞–π-–ø—Ä–æ—Å—Ç–∏—è —Ç–µ—Å—Ç - –¥–∞–ª–∏ —Å–µ—Ä–≤–∏—Å—ä—Ç –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑–≤–∏–∫–∞"""

    print("üß™ Testing PurchaseRequestService.create_request...")

    # Import-–≤–∞–º–µ —Å–µ—Ä–≤–∏—Å–∞
    from purchases.services.purchase_request_service import PurchaseRequestService

    # Mock user
    user = Mock()
    user.username = 'testuser'

    # –ü—Ä–æ—Å—Ç–∏—á–∫–∏ –¥–∞–Ω–Ω–∏
    data = {'notes': 'Test request'}
    lines = [{'product_id': 1, 'quantity': Decimal('10')}]

    # Mock DocumentService - patch-–≤–∞–º–µ import-–∞ –≤ –º–µ—Ç–æ–¥–∞
    with patch('nomenclatures.services.DocumentService') as mock_doc:
        # Mock —á–µ DocumentService.create_document() —Ä–∞–±–æ—Ç–∏
        mock_request = Mock()
        mock_request.document_number = 'REQ-001'
        mock_request.status = 'draft'
        mock_request.lines = Mock()
        mock_request.lines.count.return_value = 1

        mock_doc.create_document.return_value = Mock()
        mock_doc.create_document.return_value.ok = True
        mock_doc.create_document.return_value.data = {'document': mock_request}

        mock_doc.can_edit_document.return_value = Mock()
        mock_doc.can_edit_document.return_value.ok = True

        # Mock Product –º–æ–¥–µ–ª–∞ - —Å—ä—â–æ patch-–≤–∞–º–µ –ø—Ä–∞–≤–∏–ª–Ω–æ
        with patch('products.models.Product') as mock_product:
            # –°—ä–∑–¥–∞–π –ø—Ä–∞–≤–∏–ª–µ–Ω Product mock
            product = Mock()
            product.is_active = True
            product.base_unit = Mock()
            product._state = Mock()  # Django ORM —Ç—Ä—è–±–≤–∞ _state
            product._state.db = 'default'
            mock_product.objects.get.return_value = product

            # Mock PurchaseRequestLine.objects.create –¥–∞ –Ω–µ —Å–µ –æ–ø–∏—Ç–≤–∞ –¥–∞ —Å—ä–∑–¥–∞–≤–∞ —Ä–µ–∞–ª–µ–Ω –æ–±–µ–∫—Ç
            with patch('purchases.models.PurchaseRequestLine.objects.create') as mock_create:
                created_line = Mock()
                created_line.line_number = 1
                mock_create.return_value = created_line

                # –ò–ó–í–ò–ö–ê–ô –°–ï–†–í–ò–°–ê
                result = PurchaseRequestService.create_request(data, user, lines)

                # –ü–†–û–í–ï–†–ò –†–ï–ó–£–õ–¢–ê–¢–ê
                print(f"Result OK: {result.ok}")
                print(f"Result message: {result.msg}")

                if result.ok:
                    print("‚úÖ SUCCESS - Service works!")
                    print(f"Document number: {result.data.get('document_number')}")
                    return True
                else:
                    print("‚ùå FAILED")
                    print(f"Error: {result.msg}")
                    return False


def test_validation_basic():
    """–¢–µ—Å—Ç –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞"""

    print("\nüß™ Testing validation...")

    from purchases.services.purchase_request_service import PurchaseRequestService

    user = Mock()

    # –ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏ - –ø—Ä–∞–∑–Ω–∏ —Ä–µ–¥–æ–≤–µ
    invalid_lines = [
        {'product_id': None, 'quantity': Decimal('10')},  # –Ω—è–º–∞ product
        {'product_id': 1, 'quantity': Decimal('-5')}  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    ]

    # Mock Product –∑–∞ –¥–∞ –Ω–µ –≤—ä—Ä—Ç–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏
    with patch('products.models.Product') as mock_product:
        # –ù–∞–ø—Ä–∞–≤–∏ —Ç–∞–∫–∞ —á–µ Product.objects.get() –¥–∞ –Ω–µ —Å–µ –∏–∑–≤–∏–∫–≤–∞
        mock_product.DoesNotExist = Exception

        # –¢–µ—Å—Ç–≤–∞–π –≤–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞
        result = PurchaseRequestService._validate_request_data_via_services({}, invalid_lines, user)

        print(f"Validation result: {result.ok}")
        if not result.ok:
            print(f"Validation errors: {result.msg}")
            print("‚úÖ VALIDATION WORKS - caught invalid data!")
            return True
        else:
            print("‚ùå VALIDATION FAILED - should have caught errors!")
            return False


if __name__ == '__main__':
    print("=" * 50)
    print("üöÄ TESTING PurchaseRequestService")
    print("=" * 50)

    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç
    test1_ok = test_create_request_basic()

    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è
    test2_ok = test_validation_basic()

    print("\n" + "=" * 50)
    print("üìä SUMMARY:")
    print(f"Basic creation test: {'‚úÖ PASS' if test1_ok else '‚ùå FAIL'}")
    print(f"Validation test: {'‚úÖ PASS' if test2_ok else '‚ùå FAIL'}")

    if test1_ok and test2_ok:
        print("üéâ ALL TESTS PASSED!")
    else:
        print("üí• SOME TESTS FAILED!")

    print("=" * 50)