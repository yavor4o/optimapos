# Generated by Django 5.2.3 on 2025-08-25 13:47

import django.core.validators
import django.db.models.deletion
import mptt.fields
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ISO 4217 code like BGN, EUR, USD', max_length=3, unique=True, verbose_name='Currency Code')),
                ('name', models.CharField(max_length=50, verbose_name='Currency Name')),
                ('symbol', models.CharField(blank=True, help_text='Currency symbol like лв, €, $', max_length=5, verbose_name='Symbol')),
                ('is_base', models.BooleanField(default=False, help_text='Only one currency can be base', verbose_name='Is Base Currency')),
                ('decimal_places', models.PositiveSmallIntegerField(default=2, help_text='Number of decimal places for amounts', verbose_name='Decimal Places')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='PriceGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Price Group Name')),
                ('code', models.CharField(help_text='Short code for quick reference', max_length=20, unique=True, verbose_name='Code')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('default_discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Default discount percentage for this group', max_digits=5, verbose_name='Default Discount %')),
                ('priority', models.IntegerField(default=0, help_text='Higher priority = takes precedence in conflicts', verbose_name='Priority')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Price Group',
                'verbose_name_plural': 'Price Groups',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code: A-Z, 0-9, underscore, dash only (max 20 chars)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters, numbers, underscore and dash (max 20 chars)', regex='^[A-Z0-9_-]{1,20}$')], verbose_name='Code')),
                ('name', models.CharField(db_index=True, help_text='Human readable name', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this nomenclature is currently active', verbose_name='Is Active')),
                ('is_system', models.BooleanField(default=False, help_text='System nomenclatures cannot be deleted by users', verbose_name='Is System')),
                ('sort_order', models.IntegerField(default=0, help_text='For custom ordering in lists and dropdowns', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/logos/', verbose_name='Brand Logo')),
                ('website', models.URLField(blank=True, verbose_name='Website')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code like: draft, submitted, approved', max_length=30, unique=True, verbose_name='Status Code')),
                ('name', models.CharField(help_text='Name shown in UI', max_length=100, verbose_name='Display Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of this status', verbose_name='Description')),
                ('allow_edit', models.BooleanField(default=False, help_text='Can documents in this status be edited?', verbose_name='Allow Edit')),
                ('allow_delete', models.BooleanField(default=False, help_text='Can documents in this status be deleted?', verbose_name='Allow Delete')),
                ('color', models.CharField(default='#6c757d', help_text='HEX color for badges (#RRGGBB)', max_length=7, verbose_name='Color')),
                ('icon', models.CharField(blank=True, help_text='CSS class for icon (e.g., fa-check, bi-check-circle)', max_length=50, verbose_name='Icon Class')),
                ('badge_class', models.CharField(default='badge-secondary', help_text='Bootstrap badge class', max_length=50, verbose_name='Badge CSS Class')),
                ('is_system', models.BooleanField(default=False, help_text='System status that cannot be deleted', verbose_name='System Status')),
                ('is_active', models.BooleanField(default=True, help_text='Is this status available for use?', verbose_name='Active')),
                ('sort_order', models.IntegerField(default=0, help_text='Order for display', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Document Status',
                'verbose_name_plural': 'Document Statuses',
                'db_table': 'nomenclature_document_status',
                'ordering': ['sort_order', 'name'],
                'indexes': [models.Index(fields=['code'], name='nomenclatur_code_10c1e3_idx'), models.Index(fields=['is_active'], name='nomenclatur_is_acti_5be550_idx')],
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code: A-Z, 0-9, underscore, dash only (max 20 chars)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters, numbers, underscore and dash (max 20 chars)', regex='^[A-Z0-9_-]{1,20}$')], verbose_name='Code')),
                ('name', models.CharField(db_index=True, help_text='Human readable name', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this nomenclature is currently active', verbose_name='Is Active')),
                ('is_system', models.BooleanField(default=False, help_text='System nomenclatures cannot be deleted by users', verbose_name='Is System')),
                ('sort_order', models.IntegerField(default=0, help_text='For custom ordering in lists and dropdowns', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('type_key', models.CharField(help_text='Unique identifier: purchase_request, sales_invoice, inventory_adjustment, etc.', max_length=50, verbose_name='Type Key')),
                ('app_name', models.CharField(help_text='Django app: purchases, sales, inventory, hr, contracts', max_length=50, verbose_name='App Name')),
                ('affects_inventory', models.BooleanField(default=False, help_text='Does this document type change inventory quantities?', verbose_name='Affects Inventory')),
                ('inventory_direction', models.CharField(choices=[('in', 'Increases Stock (IN) - deliveries, production, adjustments+'), ('out', 'Decreases Stock (OUT) - sales, consumption, adjustments-'), ('both', 'Can be Both - transfers, complex adjustments'), ('none', 'No Effect - quotes, requests, reports')], default='none', help_text='How this document affects inventory levels', max_length=10, verbose_name='Inventory Direction')),
                ('requires_approval', models.BooleanField(default=False, help_text='Must be approved before processing (uses ApprovalRule system)', verbose_name='Requires Approval')),
                ('is_fiscal', models.BooleanField(default=False, help_text='Subject to Bulgarian fiscal regulations (VAT, 10-digit numbering, NRA requirements)', verbose_name='Is Fiscal Document')),
                ('auto_number', models.BooleanField(default=True, help_text='Automatically assign document numbers (uses numbering.py configuration)', verbose_name='Auto Number')),
                ('allows_attachments', models.BooleanField(default=True, help_text='Can attach files to documents of this type', verbose_name='Allows Attachments')),
                ('allow_edit_completed', models.BooleanField(default=False, help_text='Can completed documents be edited?', verbose_name='Allow Edit When Completed')),
                ('auto_receive', models.BooleanField(default=False, help_text='Automatically receive inventory when order is confirmed', verbose_name='Auto Receive Inventory')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Document Type',
                'verbose_name_plural': 'Document Types',
                'ordering': ['app_name', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ApprovalRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name: "Manager approval for orders over 1000 BGN"', max_length=100, verbose_name='Rule Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of when this rule applies', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is currently active', verbose_name='Is Active')),
                ('sort_order', models.PositiveIntegerField(default=10, help_text='Order for applying rules (lower = higher priority)', verbose_name='Sort Order')),
                ('approval_level', models.PositiveIntegerField(default=1, help_text='Approval level: 1=first level, 2=second level, etc.', verbose_name='Approval Level')),
                ('requires_previous_level', models.BooleanField(default=True, help_text='Must previous approval levels be completed first?', verbose_name='Requires Previous Level')),
                ('approver_type', models.CharField(choices=[('user', 'Specific User'), ('role', 'User Group/Role'), ('permission', 'Permission-based'), ('dynamic', 'Dynamic (determined at runtime)')], default='role', help_text='How to determine who can approve', max_length=20, verbose_name='Approver Type')),
                ('min_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Minimum document amount for this rule to apply', max_digits=12, verbose_name='Minimum Amount')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum document amount (leave empty for unlimited)', max_digits=12, null=True, verbose_name='Maximum Amount')),
                ('currency', models.CharField(default='BGN', help_text='Currency for amount limits (ISO code)', max_length=3, verbose_name='Currency')),
                ('requires_reason', models.BooleanField(default=False, help_text='Must user provide a reason/comment when using this rule?', verbose_name='Requires Reason')),
                ('rejection_allowed', models.BooleanField(default=True, help_text='Can user reject at this level?', verbose_name='Rejection Allowed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approver_permission', models.ForeignKey(blank=True, help_text='Permission required to approve (if type=permission)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='approval_rules', to='auth.permission', verbose_name='Required Permission')),
                ('approver_role', models.ForeignKey(blank=True, help_text='Group/role that can approve (if type=role)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='approval_rules', to='auth.group', verbose_name='Approver Role')),
                ('approver_user', models.ForeignKey(blank=True, help_text='Specific user who can approve (if type=user)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='approval_rules', to=settings.AUTH_USER_MODEL, verbose_name='Approver User')),
                ('from_status_obj', models.ForeignKey(help_text='Starting status for this transition', on_delete=django.db.models.deletion.PROTECT, related_name='approval_rules_from', to='nomenclatures.documentstatus', verbose_name='From Status')),
                ('to_status_obj', models.ForeignKey(help_text='Target status for this transition', on_delete=django.db.models.deletion.PROTECT, related_name='approval_rules_to', to='nomenclatures.documentstatus', verbose_name='To Status')),
                ('document_type', models.ForeignKey(help_text='Which document type this rule applies to', on_delete=django.db.models.deletion.CASCADE, to='nomenclatures.documenttype', verbose_name='Document Type')),
            ],
            options={
                'verbose_name': 'Approval Rule',
                'verbose_name_plural': 'Approval Rules',
                'ordering': ['document_type', 'approval_level', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_initial', models.BooleanField(default=False, help_text='Is this the starting status for new documents?', verbose_name='Initial Status')),
                ('is_final', models.BooleanField(default=False, help_text='Is this a final status (no transitions from it)?', verbose_name='Final Status')),
                ('is_cancellation', models.BooleanField(default=False, help_text='Is this the cancellation status for this type?', verbose_name='Cancellation Status')),
                ('creates_inventory_movements', models.BooleanField(default=False, help_text='Should inventory movements be created when document enters this status?', verbose_name='Creates Inventory Movements')),
                ('reverses_inventory_movements', models.BooleanField(default=False, help_text='Should existing inventory movements be reversed when document enters this status?', verbose_name='Reverses Inventory Movements')),
                ('allows_movement_correction', models.BooleanField(default=False, help_text='Can inventory movements be corrected when document is in this status?', verbose_name='Allows Movement Correction')),
                ('auto_correct_movements_on_edit', models.BooleanField(default=False, help_text='Automatically sync movements when document content is edited in this status?', verbose_name='Auto Correct Movements on Edit')),
                ('allows_editing', models.BooleanField(default=True, help_text='Can documents be edited in this status? (overrides DocumentStatus.allow_edit)', verbose_name='Allows Editing')),
                ('allows_deletion', models.BooleanField(default=False, help_text='Can documents be deleted in this status? (overrides DocumentStatus.allow_delete)', verbose_name='Allows Deletion')),
                ('custom_name', models.CharField(blank=True, help_text='Override status name for this document type', max_length=100, verbose_name='Custom Name')),
                ('sort_order', models.IntegerField(default=0, help_text='Order in workflow', verbose_name='Sort Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_statuses', to='nomenclatures.documenttype', verbose_name='Document Type')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type_configurations', to='nomenclatures.documentstatus', verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Document Type Status Configuration',
                'verbose_name_plural': 'Document Type Status Configurations',
                'db_table': 'nomenclature_document_type_status',
                'ordering': ['document_type', 'sort_order'],
            },
        ),
        migrations.AddField(
            model_name='documenttype',
            name='statuses',
            field=models.ManyToManyField(blank=True, help_text='Available statuses for this document type', related_name='document_types', through='nomenclatures.DocumentTypeStatus', to='nomenclatures.documentstatus'),
        ),
        migrations.CreateModel(
            name='ExchangeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(db_index=True, verbose_name='Date')),
                ('units', models.DecimalField(decimal_places=0, default=1, help_text='Number of currency units (e.g., 1, 100, 1000)', max_digits=10, verbose_name='Currency Units')),
                ('buy_rate', models.DecimalField(decimal_places=6, help_text='Rate when we buy this currency', max_digits=10, verbose_name='Buy Rate')),
                ('sell_rate', models.DecimalField(decimal_places=6, help_text='Rate when we sell this currency', max_digits=10, verbose_name='Sell Rate')),
                ('central_rate', models.DecimalField(decimal_places=6, help_text='Official rate from central bank', max_digits=10, verbose_name='Central Bank Rate')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_exchange_rates', to=settings.AUTH_USER_MODEL)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='nomenclatures.currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Exchange Rate',
                'verbose_name_plural': 'Exchange Rates',
                'ordering': ['-date', 'currency'],
            },
        ),
        migrations.CreateModel(
            name='NumberingConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code: A-Z, 0-9, underscore, dash only (max 20 chars)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters, numbers, underscore and dash (max 20 chars)', regex='^[A-Z0-9_-]{1,20}$')], verbose_name='Code')),
                ('name', models.CharField(db_index=True, help_text='Human readable name', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this nomenclature is currently active', verbose_name='Is Active')),
                ('is_system', models.BooleanField(default=False, help_text='System nomenclatures cannot be deleted by users', verbose_name='Is System')),
                ('sort_order', models.IntegerField(default=0, help_text='For custom ordering in lists and dropdowns', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('numbering_type', models.CharField(choices=[('fiscal', 'Fiscal (10 digits, no prefix) - Bulgarian law'), ('internal', 'Internal (flexible prefix + digits)')], help_text='Fiscal documents must use 10-digit format without prefix', max_length=20, verbose_name='Numbering Type')),
                ('prefix', models.CharField(blank=True, help_text='Document prefix: REQ, PO, VAR-REQ (empty for fiscal documents)', max_length=10, verbose_name='Prefix')),
                ('digits_count', models.PositiveIntegerField(default=4, help_text='Number of digits: 4=0001, 10=0000000001 (minimum 10 for fiscal)', verbose_name='Digits Count')),
                ('current_number', models.PositiveIntegerField(default=0, help_text='Last issued number (next will be current_number + 1)', verbose_name='Current Number')),
                ('series_number', models.PositiveIntegerField(default=1, help_text='Series identifier like Microinvest: (1), (2), (23)', verbose_name='Series Number')),
                ('series_name', models.CharField(blank=True, help_text='Human-readable series name: "София магазин", "Варна офис"', max_length=100, verbose_name='Series Name')),
                ('reset_yearly', models.BooleanField(default=False, help_text='Reset counter to 0 each year (not recommended for fiscal)', verbose_name='Reset Yearly')),
                ('last_reset_year', models.PositiveIntegerField(blank=True, help_text='Year when counter was last reset', null=True, verbose_name='Last Reset Year')),
                ('is_default', models.BooleanField(default=False, help_text='Default numbering for this document type (only one per type)', verbose_name='Is Default')),
                ('max_number', models.PositiveIntegerField(blank=True, help_text='Maximum allowed number (prevents overflow)', null=True, verbose_name='Max Number')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='numbering_configs', to='nomenclatures.documenttype', verbose_name='Document Type')),
            ],
            options={
                'verbose_name': 'Numbering Configuration',
                'verbose_name_plural': 'Numbering Configurations',
                'ordering': ['document_type', 'series_number', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LocationNumberingAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Location ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this assignment is currently active', verbose_name='Is Active')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, verbose_name='Assigned At')),
                ('assigned_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='numbering_assignments_made', to=settings.AUTH_USER_MODEL, verbose_name='Assigned By')),
                ('location_content_type', models.ForeignKey(blank=True, limit_choices_to=models.Q(models.Q(('app_label', 'inventory'), ('model', 'inventorylocation')), models.Q(('app_label', 'sales'), ('model', 'onlinestore')), models.Q(('app_label', 'partners'), ('model', 'customersite')), _connector='OR'), null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Location Type')),
                ('numbering_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_assignments', to='nomenclatures.numberingconfiguration', verbose_name='Numbering Configuration')),
            ],
            options={
                'verbose_name': 'Location Numbering Assignment',
                'verbose_name_plural': 'Location Numbering Assignments',
                'ordering': ['location_content_type', 'location_object_id', 'numbering_config'],
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code: A-Z, 0-9, underscore, dash only (max 20 chars)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters, numbers, underscore and dash (max 20 chars)', regex='^[A-Z0-9_-]{1,20}$')], verbose_name='Code')),
                ('name', models.CharField(db_index=True, help_text='Human readable name', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this nomenclature is currently active', verbose_name='Is Active')),
                ('is_system', models.BooleanField(default=False, help_text='System nomenclatures cannot be deleted by users', verbose_name='Is System')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('key', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Card'), ('BANK', 'Bank Transfer'), ('VOUCHER', 'Voucher/Coupon'), ('CREDIT', 'On Credit')], help_text='Internal system key for payment type', max_length=20, unique=True, verbose_name='System Key')),
                ('is_cash', models.BooleanField(default=False, help_text='Whether this is a cash-based payment', verbose_name='Is Cash Payment')),
                ('requires_reference', models.BooleanField(default=False, help_text='Whether reference number is required (e.g., card auth)', verbose_name='Requires Reference')),
                ('allows_change', models.BooleanField(default=False, help_text='Whether change can be given (only for cash)', verbose_name='Allows Change')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether manager approval is required', verbose_name='Requires Approval')),
                ('is_fiscal', models.BooleanField(default=True, help_text='Whether to include in fiscal reports', verbose_name='Is Fiscal')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum allowed amount for this payment type', max_digits=10, null=True, verbose_name='Minimum Amount')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum allowed amount for this payment type', max_digits=10, null=True, verbose_name='Maximum Amount')),
                ('sort_order', models.IntegerField(default=0, help_text='Display order in POS', verbose_name='Sort Order')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Payment Type',
                'verbose_name_plural': 'Payment Types',
                'ordering': ['sort_order', 'code'],
            },
        ),
        migrations.CreateModel(
            name='ProductGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code like DRINKS, FOOD, etc.', max_length=20, unique=True, verbose_name='Group Code')),
                ('name', models.CharField(db_index=True, max_length=100, verbose_name='Group Name')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Is Active')),
                ('sort_order', models.IntegerField(default=0, help_text='Used for custom ordering in reports and UI', verbose_name='Sort Order')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='nomenclatures.productgroup', verbose_name='Parent Group')),
            ],
            options={
                'verbose_name': 'Product Group',
                'verbose_name_plural': 'Product Groups',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code: A-Z, 0-9, underscore, dash only (max 20 chars)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters, numbers, underscore and dash (max 20 chars)', regex='^[A-Z0-9_-]{1,20}$')], verbose_name='Code')),
                ('name', models.CharField(db_index=True, help_text='Human readable name', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this nomenclature is currently active', verbose_name='Is Active')),
                ('is_system', models.BooleanField(default=False, help_text='System nomenclatures cannot be deleted by users', verbose_name='Is System')),
                ('sort_order', models.IntegerField(default=0, help_text='For custom ordering in lists and dropdowns', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('category', models.CharField(choices=[('FOOD', 'Food Products'), ('NONFOOD', 'Non-Food Products'), ('TOBACCO', 'Tobacco Products'), ('ALCOHOL', 'Alcoholic Beverages'), ('SERVICE', 'Services')], default='FOOD', help_text='Main category for reporting', max_length=20, verbose_name='Category')),
                ('requires_expiry_date', models.BooleanField(default=False, help_text='Whether products of this type must have expiry dates', verbose_name='Requires Expiry Date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Product Type',
                'verbose_name_plural': 'Product Types',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TaxGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code: A-Z, 0-9, underscore, dash only (max 20 chars)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters, numbers, underscore and dash (max 20 chars)', regex='^[A-Z0-9_-]{1,20}$')], verbose_name='Code')),
                ('name', models.CharField(db_index=True, help_text='Human readable name', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this nomenclature is currently active', verbose_name='Is Active')),
                ('is_system', models.BooleanField(default=False, help_text='System nomenclatures cannot be deleted by users', verbose_name='Is System')),
                ('sort_order', models.IntegerField(default=0, help_text='For custom ordering in lists and dropdowns', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('rate', models.DecimalField(decimal_places=2, help_text='Tax rate as percentage', max_digits=5, verbose_name='Rate (%)')),
                ('tax_type', models.CharField(choices=[('VAT', 'VAT/ДДС'), ('EXCISE', 'Excise/Акциз'), ('OTHER', 'Other')], default='VAT', max_length=20, verbose_name='Tax Type')),
                ('is_default', models.BooleanField(default=False, help_text='Default tax group for new products', verbose_name='Is Default')),
                ('is_reverse_charge', models.BooleanField(default=False, help_text='For EU reverse charge mechanism', verbose_name='Reverse Charge')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Tax Group',
                'verbose_name_plural': 'Tax Groups',
                'ordering': ['tax_type', 'rate'],
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_index=True, help_text='Unique code: A-Z, 0-9, underscore, dash only (max 20 chars)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only uppercase letters, numbers, underscore and dash (max 20 chars)', regex='^[A-Z0-9_-]{1,20}$')], verbose_name='Code')),
                ('name', models.CharField(db_index=True, help_text='Human readable name', max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Optional detailed description', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this nomenclature is currently active', verbose_name='Is Active')),
                ('is_system', models.BooleanField(default=False, help_text='System nomenclatures cannot be deleted by users', verbose_name='Is System')),
                ('sort_order', models.IntegerField(default=0, help_text='For custom ordering in lists and dropdowns', verbose_name='Sort Order')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('unit_type', models.CharField(choices=[('PIECE', 'Piece/Count'), ('WEIGHT', 'Weight'), ('VOLUME', 'Volume'), ('LENGTH', 'Length'), ('AREA', 'Area')], default='PIECE', max_length=20, verbose_name='Unit Type')),
                ('allow_decimals', models.BooleanField(default=True, help_text='Whether fractional quantities are allowed', verbose_name='Allow Decimals')),
                ('decimal_places', models.PositiveSmallIntegerField(default=3, help_text='Number of decimal places to display', verbose_name='Decimal Places')),
                ('symbol', models.CharField(blank=True, help_text='Display symbol (e.g., kg, л, м²)', max_length=10, verbose_name='Symbol')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Unit of Measure',
                'verbose_name_plural': 'Units of Measure',
                'ordering': ['unit_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserNumberingPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_numbering_preferences', to='nomenclatures.documenttype', verbose_name='Document Type')),
                ('preferred_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_preferences', to='nomenclatures.numberingconfiguration', verbose_name='Preferred Configuration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='numbering_preferences', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Numbering Preference',
                'verbose_name_plural': 'User Numbering Preferences',
                'ordering': ['user', 'document_type'],
            },
        ),
        migrations.CreateModel(
            name='ApprovalLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(verbose_name='Object ID')),
                ('action', models.CharField(choices=[('submitted', 'Submitted for Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('escalated', 'Escalated'), ('cancelled', 'Cancelled')], max_length=20, verbose_name='Action')),
                ('from_status', models.CharField(max_length=30, verbose_name='From Status')),
                ('to_status', models.CharField(max_length=30, verbose_name='To Status')),
                ('comments', models.TextField(blank=True, help_text='Additional comments or reasons', verbose_name='Comments')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, help_text='Browser/client user agent', verbose_name='User Agent')),
                ('actor', models.ForeignKey(help_text='User who performed the action', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Actor')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('rule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='nomenclatures.approvalrule', verbose_name='Applied Rule')),
            ],
            options={
                'verbose_name': 'Approval Log',
                'verbose_name_plural': 'Approval Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='nomenclatur_content_344b5f_idx'), models.Index(fields=['timestamp'], name='nomenclatur_timesta_41da37_idx'), models.Index(fields=['action'], name='nomenclatur_action_626322_idx'), models.Index(fields=['actor'], name='nomenclatur_actor_i_f8cf55_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='approvalrule',
            index=models.Index(fields=['document_type', 'from_status_obj', 'to_status_obj'], name='nomenclatur_documen_c3f39e_idx'),
        ),
        migrations.AddIndex(
            model_name='approvalrule',
            index=models.Index(fields=['document_type', 'is_active'], name='nomenclatur_documen_d18334_idx'),
        ),
        migrations.AddIndex(
            model_name='approvalrule',
            index=models.Index(fields=['approval_level'], name='nomenclatur_approva_2c7607_idx'),
        ),
        migrations.AddIndex(
            model_name='approvalrule',
            index=models.Index(fields=['approver_type', 'is_active'], name='nomenclatur_approve_b6fd34_idx'),
        ),
        migrations.AddIndex(
            model_name='approvalrule',
            index=models.Index(fields=['min_amount', 'max_amount'], name='nomenclatur_min_amo_69972a_idx'),
        ),
        migrations.AddConstraint(
            model_name='approvalrule',
            constraint=models.UniqueConstraint(fields=('document_type', 'from_status_obj', 'to_status_obj', 'approval_level'), name='unique_approval_rule_per_level'),
        ),
        migrations.AddIndex(
            model_name='documenttypestatus',
            index=models.Index(fields=['document_type', 'is_initial'], name='nomenclatur_documen_7e4487_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttypestatus',
            index=models.Index(fields=['document_type', 'is_final'], name='nomenclatur_documen_1ff42b_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttypestatus',
            index=models.Index(fields=['document_type', 'is_cancellation'], name='nomenclatur_documen_ee313f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='documenttypestatus',
            unique_together={('document_type', 'status')},
        ),
        migrations.AddIndex(
            model_name='documenttype',
            index=models.Index(fields=['app_name', 'type_key'], name='nomenclatur_app_nam_9ce310_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttype',
            index=models.Index(fields=['affects_inventory', 'inventory_direction'], name='nomenclatur_affects_7f4a89_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttype',
            index=models.Index(fields=['requires_approval'], name='nomenclatur_require_c22004_idx'),
        ),
        migrations.AddIndex(
            model_name='documenttype',
            index=models.Index(fields=['is_fiscal'], name='nomenclatur_is_fisc_03a921_idx'),
        ),
        migrations.AddConstraint(
            model_name='documenttype',
            constraint=models.UniqueConstraint(fields=('app_name', 'type_key'), name='unique_app_type_key'),
        ),
        migrations.AddIndex(
            model_name='exchangerate',
            index=models.Index(fields=['-date', 'currency'], name='nomenclatur_date_506fc6_idx'),
        ),
        migrations.AddIndex(
            model_name='exchangerate',
            index=models.Index(fields=['currency', '-date'], name='nomenclatur_currenc_77e194_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='exchangerate',
            unique_together={('currency', 'date')},
        ),
        migrations.AddIndex(
            model_name='numberingconfiguration',
            index=models.Index(fields=['document_type', 'numbering_type'], name='nomenclatur_documen_6650fa_idx'),
        ),
        migrations.AddIndex(
            model_name='numberingconfiguration',
            index=models.Index(fields=['document_type', 'is_default'], name='nomenclatur_documen_bfe1a1_idx'),
        ),
        migrations.AddIndex(
            model_name='numberingconfiguration',
            index=models.Index(fields=['numbering_type', 'is_active'], name='nomenclatur_numberi_547dca_idx'),
        ),
        migrations.AddIndex(
            model_name='numberingconfiguration',
            index=models.Index(fields=['series_number'], name='nomenclatur_series__2c2593_idx'),
        ),
        migrations.AddConstraint(
            model_name='numberingconfiguration',
            constraint=models.UniqueConstraint(fields=('document_type', 'series_number'), name='unique_document_type_series'),
        ),
        migrations.AddConstraint(
            model_name='numberingconfiguration',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('document_type', 'is_default'), name='unique_default_per_document_type'),
        ),
        migrations.AddIndex(
            model_name='locationnumberingassignment',
            index=models.Index(fields=['location_content_type', 'location_object_id', 'is_active'], name='nomenclatur_locatio_99f66f_idx'),
        ),
        migrations.AddIndex(
            model_name='locationnumberingassignment',
            index=models.Index(fields=['numbering_config', 'is_active'], name='nomenclatur_numberi_8c0e85_idx'),
        ),
        migrations.AddConstraint(
            model_name='locationnumberingassignment',
            constraint=models.UniqueConstraint(fields=('location_content_type', 'location_object_id', 'numbering_config'), name='unique_location_numbering'),
        ),
        migrations.AddConstraint(
            model_name='taxgroup',
            constraint=models.UniqueConstraint(fields=('name', 'rate'), name='unique_tax_group_name_rate'),
        ),
        migrations.AddConstraint(
            model_name='taxgroup',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('is_default',), name='unique_default_tax_group'),
        ),
        migrations.AddConstraint(
            model_name='usernumberingpreference',
            constraint=models.UniqueConstraint(fields=('user', 'document_type'), name='unique_user_document_type_preference'),
        ),
    ]
